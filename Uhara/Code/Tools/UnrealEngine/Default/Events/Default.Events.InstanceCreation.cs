using SharpDisasm;
using System;
using System.Collections.Generic;
using System.Deployment.Internal;
using System.Diagnostics.Eventing.Reader;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

public partial class Tools : MainShared
{
    public partial class UnrealEngine
    {
        public partial class Default
        {
            public partial class Events
            {
                private InstanceCreation instanceCreation = new InstanceCreation();

                #region API
                public IntPtr InstancePtr(string className, string objectName)
                {
                    try
                    {
                        return instanceCreation.AddArgument(InstanceCreation.ArgTypes.Instance, className, objectName, 1);
                    }
                    catch { }
                    return IntPtr.Zero;
                }

                public IntPtr[] InstancePtr(string className, string objectName, short instances)
                {
                    try
                    {
                        do
                        {
                            IntPtr basePtr = instanceCreation.AddArgument(InstanceCreation.ArgTypes.Instance, className, objectName, instances);
                            if (basePtr == IntPtr.Zero) break;

                            List<IntPtr> result = new List<IntPtr>();
                            for (int i = 0; i < instances; i++) result.Add(basePtr + (0x8 * i));
                            return result.ToArray();
                        }
                        while (false);
                    }
                    catch { }
                    return new IntPtr[0];
                }

                public IntPtr InstanceFlag(string className, string objectName)
                {
                    try
                    {
                        return instanceCreation.AddArgument(InstanceCreation.ArgTypes.Flag, className, objectName, 1);
                    }
                    catch { }
                    return IntPtr.Zero;
                }
                #endregion

                private class InstanceCreation
                {
                    #region VARIABLES
                    string SubToolID = "wznwkjje";

                    public enum InitResults
                    {
                        None = 0,
                        Loaded = 1,
                        Failed = 2
                    }
                    InitResults InitResult = InitResults.None;

                    private struct GeneratedOffsets
                    {
                        public const ulong ND_FNamePoolAddress = 0x5000;
                        public const ulong HK_StaticConstructObject_Internal = 0x2B6;
                        public const ulong HK_UObjectBeginDestroy = 0x4B6;
                    }

                    public struct SearchTypes
                    {
                        public static short None = 0;
                        public static short Equals = 1;
                        public static short Contains = 2;
                        public static short StartsWith = 3;
                        public static short EndsWith = 4;
                    }

                    public struct ArgTypes
                    {
                        public static short Instance = 0;
                        public static short Flag = 1;
                    }

                    public struct RegStatic
                    {
                        public static readonly string Instance = "rbx";
                        public static readonly string Argument = "rbp";
                    }

                    public class Element
                    {
                        public byte Offset = 0;
                        public byte Size = 0;

                        public Element(byte offset, byte size)
                        {
                            Offset = offset;
                            Size = size;
                        }
                    }

                    public static class ArgStruct
                    {
                        public static Element ArgSize = new Element(offset: 0, size: 2);
                        public static Element ArgType = new Element(offset: 2, size: 2);
                        public static Element ClassNameSearchType = new Element(offset: 4, size: 2);
                        public static Element ObjectNameSearchType = new Element(offset: 6, size: 2);
                        public static Element OutputOffset = new Element(offset: 8, size: 8);
                        public static Element ClassNamePtr = new Element(offset: 16, size: 8);
                        public static Element ObjectNamePtr = new Element(offset: 24, size: 8);
                        public static Element Instances = new Element(offset: 32, size: 2);
                        public static Element End = new Element(offset: 34, size: 0);
                    }

                    public static class OutputInstanceStruct
                    {
                        public static Element SlotCount = new Element(offset: 0, size: 2);
                        public static Element FirstInstanceSlot = new Element(offset: 2, size: 8);
                    }

                    public static class OutputFlagStruct
                    {
                        public static Element SkipDestroyMark = new Element(offset: 0, size: 8);
                        public static Element FlagCounter = new Element(offset: 8, size: 8);
                    }

                    static ulong AllocateSize = 0x20000;

                    static ulong AddressAllocateStart = 0;
                    static ulong AddressNativeCode = 0;
                    static ulong AddressNativeData = 0;
                    static ulong AddressInterfaceArguments = 0;
                    static ulong AddressInterfaceData = 0;
                    static ulong AddressInterfaceCode = 0;
                    static ulong AddressNativeArguments = 0;
                    static ulong AddressBeginDestroyCheckPool = 0;
                    static ulong AddressGlobalOutput = 0;

                    static ulong OffsetNativeCode = 0x0;
                    static ulong OffsetNativeData = 0x1000;
                    static ulong OffsetInterfaceArguments = 0x2000;
                    static ulong OffsetInterfaceData = 0x3000;
                    static ulong OffsetInterfaceCode = 0x4000;
                    static ulong OffsetNativeArguments = 0x5000;
                    static ulong OffsetBeginDestroyCheckPool = 0x6000;
                    static ulong OffsetGlobalOutput = 0x7000;
                    #endregion
                    #region ASM_CODE
                    byte[] AsmCode = new byte[] {
0xE8, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x58, 0x90, 0x48, 0x90, 0x83, 0x90, 0xE8, 0x90, 0x05, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0xEC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x05, 0x90, 0x00, 0x90, 0x20, 0x90, 0x00, 0x90, 0x00, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0xD8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x05, 0x90, 0x00, 0x90, 0x70, 0x90, 0x00, 0x90, 0x00, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC9, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCA, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC1, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x80, 0x90, 0x39, 0x90, 0x00, 0x90, 0x75, 0x90, 0xF5, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC1, 0x90, 0x01, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC8, 0x90, 0xC3, 0x90, 0x41, 0x90, 0x89, 0x90, 0xD0, 0x90, 0x41, 0x90, 0x89, 0x90, 0xD1, 0x90, 0x41, 0x90, 0x89, 0x90, 0xD2, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC9, 0x90, 0x49, 0x90, 0xC7, 0x90, 0xC3, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x00, 0x90, 0x00, 0x90, 0x4D, 0x90, 0x21, 0x90, 0xD8, 0x90, 0x49, 0x90, 0xC1, 0x90, 0xE8, 0x90, 0x00, 0x90, 0x49, 0x90, 0xBB, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x4D, 0x90, 0x21, 0x90, 0xD9, 0x90, 0x49, 0x90, 0xC1, 0x90, 0xE9, 0x90, 0x10, 0x90, 0x49, 0x90, 0xBB, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x4D, 0x90, 0x21, 0x90, 0xDA, 0x90, 0x49, 0x90, 0xC1, 0x90, 0xEA, 0x90, 0x20, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC1, 0x90, 0x10, 0x90, 0x4D, 0x90, 0x6B, 0x90, 0xC9, 0x90, 0x08, 0x90, 0x4C, 0x90, 0x01, 0x90, 0xC9, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x74, 0x90, 0x2E, 0x90, 0x4C, 0x90, 0x8B, 0x90, 0x11, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xD2, 0x90, 0x74, 0x90, 0x26, 0x90, 0x4D, 0x90, 0x6B, 0x90, 0xC0, 0x90, 0x02, 0x90, 0x4D, 0x90, 0x01, 0x90, 0xC2, 0x90, 0x4D, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x1A, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xDB, 0x90, 0x74, 0x90, 0x16, 0x90, 0x49, 0x90, 0xC1, 0x90, 0xEB, 0x90, 0x06, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xD1, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC1, 0x90, 0x02, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xDA, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0xC3, 0x90, 0x80, 0x90, 0x39, 0x90, 0x00, 0x90, 0x74, 0x90, 0x42, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x45, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xDB, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x11, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x1A, 0x90, 0x45, 0x90, 0x84, 0x90, 0xD2, 0x90, 0x75, 0x90, 0x03, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC0, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC1, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x03, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC0, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC8, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x01, 0x90, 0x74, 0x90, 0x18, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x02, 0x90, 0x74, 0x90, 0x0A, 0x90, 0x45, 0x90, 0x38, 0x90, 0xDA, 0x90, 0x75, 0x90, 0x0D, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0xEB, 0x90, 0xC9, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0xC3, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x2B, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC0, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC9, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCA, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC1, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC8, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x80, 0x90, 0x39, 0x90, 0x00, 0x90, 0x74, 0x90, 0x18, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x0F, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x09, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x12, 0x90, 0x4D, 0x90, 0x39, 0x90, 0xD1, 0x90, 0x75, 0x90, 0x02, 0x90, 0xEB, 0x90, 0xDE, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0xC3, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xC3, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x4A, 0x90, 0x4C, 0x90, 0x01, 0x90, 0xC2, 0x90, 0x52, 0x90, 0x41, 0x90, 0x50, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0xC3, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0x49, 0x90, 0x89, 0x90, 0xD1, 0x90, 0x41, 0x90, 0x58, 0x90, 0x5A, 0x90, 0x48, 0x90, 0x83, 0x90, 0xE9, 0x90, 0x01, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x74, 0x90, 0x29, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC9, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCA, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC8, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC9, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x11, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x1A, 0x90, 0x4D, 0x90, 0x39, 0x90, 0xDA, 0x90, 0x75, 0x90, 0x0C, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x74, 0x90, 0x0B, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x02, 0x90, 0xEB, 0x90, 0xDB, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0xC3, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xC3, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x2E, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCA, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC0, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC8, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x49, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x00, 0x90, 0x74, 0x90, 0x1C, 0x90, 0x51, 0x90, 0x52, 0x90, 0x41, 0x90, 0x50, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0x45, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x41, 0x90, 0x58, 0x90, 0x5A, 0x90, 0x59, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x06, 0x90, 0xEB, 0x90, 0xD8, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0xC3, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xC3, 0x90, 0x41, 0x90, 0x54, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x41, 0x90, 0x57, 0x90, 0x49, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x00, 0x90, 0x74, 0x90, 0x0C, 0x90, 0x49, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x01, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x9B, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x0F, 0x90, 0x0B, 0x90, 0x49, 0x90, 0x89, 0x90, 0xCC, 0x90, 0x49, 0x90, 0x89, 0x90, 0xD5, 0x90, 0x4D, 0x90, 0x89, 0x90, 0xC6, 0x90, 0x48, 0x90, 0x6B, 0x90, 0xD2, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x02, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x02, 0x90, 0x49, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x08, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x49, 0x90, 0x39, 0x90, 0xD2, 0x90, 0x7D, 0x90, 0x3E, 0x90, 0x4A, 0x90, 0x83, 0x90, 0x3C, 0x90, 0x11, 0x90, 0x00, 0x90, 0x75, 0x90, 0xF0, 0x90, 0x4A, 0x90, 0x89, 0x90, 0x1C, 0x90, 0x11, 0x90, 0x49, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x02, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xD0, 0x90, 0x49, 0x90, 0xC7, 0x90, 0xC7, 0x90, 0x08, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0xF7, 0x90, 0xF7, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xEA, 0x90, 0x48, 0x90, 0x39, 0x90, 0xD0, 0x90, 0x7E, 0x90, 0x07, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0x66, 0x90, 0x89, 0x90, 0x01, 0x90, 0xEB, 0x90, 0x3A, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xEA, 0x90, 0x4D, 0x90, 0x89, 0x90, 0xF0, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x01, 0x90, 0x48, 0x90, 0x6B, 0x90, 0xC0, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xE8, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x02, 0x90, 0x48, 0x90, 0x89, 0x90, 0x1C, 0x90, 0x01, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x01, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x48, 0x90, 0x39, 0x90, 0xD0, 0x90, 0x7E, 0x90, 0x07, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x66, 0x90, 0x89, 0x90, 0x01, 0x90, 0xEB, 0x90, 0x04, 0x90, 0x48, 0x90, 0x83, 0x90, 0x01, 0x90, 0x01, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0xC3, 0x90, 0x9C, 0x90, 0x50, 0x90, 0x53, 0x90, 0x51, 0x90, 0x52, 0x90, 0x56, 0x90, 0x57, 0x90, 0x55, 0x90, 0x54, 0x90, 0x41, 0x90, 0x50, 0x90, 0x41, 0x90, 0x51, 0x90, 0x41, 0x90, 0x52, 0x90, 0x41, 0x90, 0x53, 0x90, 0x41, 0x90, 0x54, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x41, 0x90, 0x57, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xC4, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0x27, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC5, 0x90, 0x66, 0x90, 0x83, 0x90, 0x7D, 0x90, 0x00, 0x90, 0x00, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xA6, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x45, 0x90, 0x04, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xC1, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xF6, 0x90, 0x4C, 0x90, 0x00, 0x90, 0x00, 0x90, 0x59, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x53, 0x90, 0x10, 0x90, 0x48, 0x90, 0x85, 0x90, 0xD2, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x77, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x8B, 0x90, 0x52, 0x90, 0x18, 0x90, 0x85, 0x90, 0xD2, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x6C, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0x23, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x63, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x45, 0x90, 0x04, 0x90, 0x49, 0x90, 0x89, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x89, 0x90, 0xCA, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x4D, 0x90, 0x10, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x01, 0x90, 0x75, 0x90, 0x18, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0x76, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x2B, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0x5F, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x02, 0x90, 0x75, 0x90, 0x18, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0x42, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x0D, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0x41, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x03, 0x90, 0x75, 0x90, 0x18, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0x8D, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xEF, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0x23, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x04, 0x90, 0x75, 0x90, 0x18, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0xAB, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xD1, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0x05, 0x90, 0xE9, 0x90, 0xCA, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x45, 0x90, 0x04, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xA1, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x27, 0x90, 0x4C, 0x90, 0x00, 0x90, 0x00, 0x90, 0x59, 0x90, 0x8B, 0x90, 0x53, 0x90, 0x18, 0x90, 0x85, 0x90, 0xD2, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xAA, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0x61, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xA1, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x45, 0x90, 0x06, 0x90, 0x49, 0x90, 0x89, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x89, 0x90, 0xCA, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x4D, 0x90, 0x18, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x01, 0x90, 0x75, 0x90, 0x14, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0xB4, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x6D, 0x90, 0xEB, 0x90, 0x50, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x02, 0x90, 0x75, 0x90, 0x14, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0x84, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x53, 0x90, 0xEB, 0x90, 0x36, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x03, 0x90, 0x75, 0x90, 0x14, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0xD3, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x39, 0x90, 0xEB, 0x90, 0x1C, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x04, 0x90, 0x75, 0x90, 0x14, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0xF5, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x1F, 0x90, 0xEB, 0x90, 0x02, 0x90, 0xEB, 0x90, 0x1B, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x4D, 0x90, 0x08, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x55, 0x90, 0x20, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x45, 0x90, 0x02, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0x6B, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x4D, 0x90, 0x00, 0x90, 0x48, 0x90, 0x01, 0x90, 0xCD, 0x90, 0xE9, 0x90, 0x4F, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0x41, 0x90, 0x5B, 0x90, 0x41, 0x90, 0x5A, 0x90, 0x41, 0x90, 0x59, 0x90, 0x41, 0x90, 0x58, 0x90, 0x5C, 0x90, 0x5D, 0x90, 0x5F, 0x90, 0x5E, 0x90, 0x5A, 0x90, 0x59, 0x90, 0x5B, 0x90, 0x58, 0x90, 0x9D, 0x90, 0xC3, 0x90, 0x9C, 0x90, 0x50, 0x90, 0x53, 0x90, 0x51, 0x90, 0x52, 0x90, 0x56, 0x90, 0x57, 0x90, 0x55, 0x90, 0x54, 0x90, 0x41, 0x90, 0x50, 0x90, 0x41, 0x90, 0x51, 0x90, 0x41, 0x90, 0x52, 0x90, 0x41, 0x90, 0x53, 0x90, 0x41, 0x90, 0x54, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x41, 0x90, 0x57, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x74, 0x90, 0x34, 0x90, 0x48, 0x90, 0x89, 0x90, 0xCB, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xE8, 0x90, 0x20, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x05, 0x90, 0x00, 0x90, 0x60, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xE8, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x08, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x08, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x74, 0x90, 0x0E, 0x90, 0x48, 0x90, 0x39, 0x90, 0x19, 0x90, 0x75, 0x90, 0xEF, 0x90, 0x48, 0x90, 0xC7, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0xE6, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0x41, 0x90, 0x5B, 0x90, 0x41, 0x90, 0x5A, 0x90, 0x41, 0x90, 0x59, 0x90, 0x41, 0x90, 0x58, 0x90, 0x5C, 0x90, 0x5D, 0x90, 0x5F, 0x90, 0x5E, 0x90, 0x5A, 0x90, 0x59, 0x90, 0x5B, 0x90, 0x58, 0x90, 0x9D, 0x90, 0xC3
};
                    #endregion

                    #region ADD_ARGUMENT
                    public IntPtr AddArgument(short argType, string className, string objectName, short instances)
                    {
                        do
                        {
                            if (!Initiate()) break;

                            // it can never be less than 1
                            if (instances < 1) instances = 1;

                            short _argType = argType;
                            short _classNameSearchType = 0;
                            short _objectNameSearchType = 0;
                            ulong _outputAddress = AddressGlobalOutput;
                            ulong _classNamePtr = 0;
                            ulong _objectNamePtr = 0;
                            short _instances = instances;

                            // check wildcards for string comparison
                            {
                                if (className == null) { className = ""; _classNameSearchType = SearchTypes.None; }
                                else if (className.StartsWith("*") && className.EndsWith("*")) _classNameSearchType = SearchTypes.Contains;
                                else if (className.StartsWith("*")) _classNameSearchType = SearchTypes.EndsWith;
                                else if (className.EndsWith("*")) _classNameSearchType = SearchTypes.StartsWith;
                                else _classNameSearchType = SearchTypes.Equals;

                                if (objectName == null) { objectName = ""; _objectNameSearchType = SearchTypes.None; }
                                else if (objectName.StartsWith("*") && objectName.EndsWith("*")) _objectNameSearchType = SearchTypes.Contains;
                                else if (objectName.StartsWith("*")) _objectNameSearchType = SearchTypes.EndsWith;
                                else if (objectName.EndsWith("*")) _objectNameSearchType = SearchTypes.StartsWith;
                                else _objectNameSearchType = SearchTypes.Equals;

                                className = className.Replace("*", "");
                                objectName = objectName.Replace("*", "");
                            }

                            // create string pointers
                            {
                                byte[] classNameBytes = TUtils.StringToMultibyte(className);
                                _classNamePtr = AddressInterfaceData;
                                RefWriteBytes(ProcessInstance, AddressInterfaceData, classNameBytes);
                                AddressInterfaceData += (ulong)classNameBytes.Length;

                                byte[] objectNameBytes = TUtils.StringToMultibyte(objectName);
                                _objectNamePtr = AddressInterfaceData;
                                RefWriteBytes(ProcessInstance, AddressInterfaceData, objectNameBytes);
                                AddressInterfaceData += (ulong)objectNameBytes.Length;
                            }

                            // update begin destroy check pool
                            {
                                for (int i = 0; i < instances; i++)
                                {
                                    RefWriteBytes(ProcessInstance, AddressBeginDestroyCheckPool,
                                        BitConverter.GetBytes(AddressGlobalOutput + (ulong)(i * 0x8) +
                                        OutputInstanceStruct.FirstInstanceSlot.Offset));

                                    AddressBeginDestroyCheckPool += 0x8;
                                }
                            }

                            // update output address for next argument
                            if (ArgTypes.Instance == argType)
                            {
                                AddressGlobalOutput += (ulong)((instances * 0x8) + OutputInstanceStruct.FirstInstanceSlot.Offset);
                            }
                            else if (ArgTypes.Flag == argType)
                            {
                                AddressGlobalOutput += (ulong)(instances * 0x8);
                            }

                            // build argument
                            byte[] argument = TArray.Merge(
                                BitConverter.GetBytes(ArgStruct.End.Offset),
                                BitConverter.GetBytes(argType),
                                BitConverter.GetBytes(_classNameSearchType),
                                BitConverter.GetBytes(_objectNameSearchType),
                                BitConverter.GetBytes(_outputAddress),
                                BitConverter.GetBytes(_classNamePtr),
                                BitConverter.GetBytes(_objectNamePtr),
                                BitConverter.GetBytes(instances)
                            );

                            RefWriteBytes(ProcessInstance, AddressInterfaceArguments, argument);
                            AddressInterfaceArguments += (ulong)argument.Length;

                            if (ArgTypes.Instance == argType) return (IntPtr)(_outputAddress + OutputInstanceStruct.FirstInstanceSlot.Offset);
                            else if (ArgTypes.Flag == argType) return (IntPtr)(_outputAddress + OutputFlagStruct.FlagCounter.Offset);
                        }
                        while (false);
                        return IntPtr.Zero;
                    }
                    #endregion
                    #region INITIATE
                    private bool Initiate()
                    {
                        if (InitResult == InitResults.Failed) return false;
                        else if (InitResult == InitResults.Loaded) return true;
                        try
                        {
                            do
                            {
                                if (!Allocate()) break;
                                if (!ScanData()) break;
                                if (!WriteArgs()) break;
                                if (!HookCode()) break;

                                InitResult = InitResults.Loaded;
                                return true;
                            }
                            while (false);
                        }
                        catch { }
                        InitResult = InitResults.Failed;
                        return false;
                    }
                    #endregion

                    #region ALLOCATE
                    private bool Allocate()
                    {
                        bool success = false;
                        try
                        {
                            do
                            {
                                AddressAllocateStart = MemoryManager.AllocateSafe((int)AllocateSize);
                                if (AddressAllocateStart == 0) break;

                                AddressNativeCode = AddressAllocateStart + OffsetNativeCode;
                                AddressNativeData = AddressAllocateStart + OffsetNativeData;
                                AddressInterfaceArguments = AddressAllocateStart + OffsetInterfaceArguments;
                                AddressInterfaceData = AddressAllocateStart + OffsetInterfaceData;
                                AddressInterfaceCode = AddressAllocateStart + OffsetInterfaceCode;
                                AddressNativeArguments = AddressAllocateStart + OffsetNativeArguments;
                                AddressBeginDestroyCheckPool = AddressAllocateStart + OffsetBeginDestroyCheckPool;
                                AddressGlobalOutput = AddressAllocateStart + OffsetGlobalOutput;

                                success = true;
                            } while (false);
                        }
                        catch { }
                        TUtils.Print("Events." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            " | " + "Result: " + success.ToString()); return success;
                    }
                    #endregion
                    #region SCAN_DATA
                    private bool ScanData()
                    {
                        bool success = false;
                        try
                        {
                            do
                            {
                                {
                                    if (ToolsShared.ToolData.UnrealEngine.F_StaticConstructObject_Internal == 0)
                                        ToolsShared.ToolData.UnrealEngine.F_StaticConstructObject_Internal =
                                        TConvert.Parse<ulong>(GetProcessCache(SubToolID, "F_StaticConstructObject_Internal"));

                                    if (ToolsShared.ToolData.UnrealEngine.F_StaticConstructObject_Internal == 0)
                                        ToolsShared.ToolData.UnrealEngine.F_StaticConstructObject_Internal =
                                    ScanUtility.UnrealEngine.SearchAddress(
                                    ScanUtility.UnrealEngine.Function.StaticConstructObject_Internal);

                                    if (ToolsShared.ToolData.UnrealEngine.F_StaticConstructObject_Internal == 0)
                                        break;

                                    SetProcessCache(SubToolID, "F_StaticConstructObject_Internal", "0x" +
                                        ToolsShared.ToolData.UnrealEngine.F_StaticConstructObject_Internal.ToString("X"));
                                }

                                {
                                    if (ToolsShared.ToolData.UnrealEngine.F_UObjectBeginDestroy == 0)
                                        ToolsShared.ToolData.UnrealEngine.F_UObjectBeginDestroy =
                                        TConvert.Parse<ulong>(GetProcessCache(SubToolID, "F_UObjectBeginDestroy"));

                                    if (ToolsShared.ToolData.UnrealEngine.F_UObjectBeginDestroy == 0)
                                        ToolsShared.ToolData.UnrealEngine.F_UObjectBeginDestroy =
                                       ScanUtility.UnrealEngine.SearchAddress(
                                       ScanUtility.UnrealEngine.Function.UObject_BeginDestroy);

                                    if (ToolsShared.ToolData.UnrealEngine.F_UObjectBeginDestroy == 0)
                                        break;

                                    SetProcessCache(SubToolID, "F_UObjectBeginDestroy", "0x" +
                                        ToolsShared.ToolData.UnrealEngine.F_UObjectBeginDestroy.ToString("X"));
                                }

                                {
                                    if (ToolsShared.ToolData.UnrealEngine.D_FNamePoolAddress == 0)
                                        ToolsShared.ToolData.UnrealEngine.D_FNamePoolAddress =
                                        TConvert.Parse<ulong>(GetProcessCache(SubToolID, "D_FNamePoolAddress"));

                                    if (ToolsShared.ToolData.UnrealEngine.D_FNamePoolAddress == 0)
                                        ToolsShared.ToolData.UnrealEngine.D_FNamePoolAddress =
                                        ScanUtility.UnrealEngine.SearchAddress(
                                        ScanUtility.UnrealEngine.Data.FNamePool);

                                    if (ToolsShared.ToolData.UnrealEngine.D_FNamePoolAddress == 0)
                                        break;

                                    SetProcessCache(SubToolID, "D_FNamePoolAddress", "0x" +
                                        ToolsShared.ToolData.UnrealEngine.D_FNamePoolAddress.ToString("X"));
                                }

                                success = true;
                            }
                            while (false);
                        }
                        catch { }
                        TUtils.Print("Events." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            " | " + "Result: " + success.ToString()); return success;
                    }
                    #endregion
                    #region WRITE_ARGS
                    private bool WriteArgs()
                    {
                        bool success = false;
                        try
                        {
                            do
                            {
                                // FNamePoolAddress
                                RefWriteBytes(ProcessInstance, AddressAllocateStart + GeneratedOffsets.ND_FNamePoolAddress,
                                    BitConverter.GetBytes(ToolsShared.ToolData.UnrealEngine.D_FNamePoolAddress));

                                success = true;
                            }
                            while (false);
                        }
                        catch { }
                        TUtils.Print("Events." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            " | " + "Result: " + success.ToString()); return success;
                    }
                    #endregion
                    #region HOOK_CODE
                    private bool HookCode()
                    {
                        bool success = false;
                        try
                        {
                            do
                            {

                                byte[] decoded = TArray.DecodeBlock(AsmCode);
                                RefWriteBytes(ProcessInstance, AddressNativeCode, decoded);
                                AddressNativeCode += (ulong)decoded.Length;

                                {
                                    ulong jumpNative = AddressAllocateStart + GeneratedOffsets.HK_StaticConstructObject_Internal;
                                    ulong jumpHook = AddressInterfaceCode;

                                    ulong retAddress = TMemory.GetFunctionReturn(ProcessInstance,
                                        ToolsShared.ToolData.UnrealEngine.F_StaticConstructObject_Internal);
                                    if (retAddress == 0) break;

                                    int minimumOverwrite = TMemory.GetMinimumOverwriteBackwards(ProcessInstance, retAddress, 14);
                                    if (minimumOverwrite == 0) break;

                                    ulong hookAddress = retAddress - (ulong)minimumOverwrite;
                                    byte[] stolenCode = TMemory.ReadMemoryBytes(ProcessInstance, hookAddress, minimumOverwrite);

                                    AddressInterfaceCode += TMemory.CreateAbsoluteCall(ProcessInstance, AddressInterfaceCode, jumpNative, 0x28);
                                    RefWriteBytes(ProcessInstance, AddressInterfaceCode, stolenCode);
                                    AddressInterfaceCode += (ulong)stolenCode.Length;

                                    AddressInterfaceCode += TMemory.CreateAbsoluteJump(ProcessInstance, AddressInterfaceCode, retAddress);
                                    MemoryManager.AddOverwrite(hookAddress, stolenCode);
                                    TMemory.CreateAbsoluteJump(ProcessInstance, hookAddress, jumpHook);

                                    //TUtils.Print("Events." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                                        //" | " + "Hook: " + "0x" + hookAddress.ToString("X"));
                                }

                                {
                                    ulong jumpNative = AddressAllocateStart + GeneratedOffsets.HK_UObjectBeginDestroy;
                                    ulong hookAddress = ToolsShared.ToolData.UnrealEngine.F_UObjectBeginDestroy;
                                    ulong jumpHook = AddressInterfaceCode;

                                    int minimumOverwrite = TInstruction.GetMinimumOverwrite(ProcessInstance, hookAddress, 14);
                                    if (minimumOverwrite == 0) break;

                                    byte[] stolenCode = TMemory.ReadMemoryBytes(ProcessInstance, hookAddress, minimumOverwrite);

                                    AddressInterfaceCode += TMemory.CreateAbsoluteCall(ProcessInstance, AddressInterfaceCode, jumpNative, 0x28);
                                    RefWriteBytes(ProcessInstance, AddressInterfaceCode, stolenCode);
                                    AddressInterfaceCode += (ulong)stolenCode.Length;
                                    AddressInterfaceCode += TMemory.CreateAbsoluteJump(ProcessInstance, AddressInterfaceCode, hookAddress + (ulong)minimumOverwrite);

                                    MemoryManager.AddOverwrite(hookAddress, stolenCode);
                                    TMemory.CreateAbsoluteJump(ProcessInstance, hookAddress, jumpHook);

                                    //TUtils.Print("Events." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                                        //" | " + "Hook: " + "0x" + hookAddress.ToString("X"));
                                }

                                success = true;
                            }
                            while (false);
                        }
                        catch { }
                        TUtils.Print("Events." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            " | " + "Result: " + success.ToString()); return success;
                    }
                    #endregion
                }
            }
        }
    }
}