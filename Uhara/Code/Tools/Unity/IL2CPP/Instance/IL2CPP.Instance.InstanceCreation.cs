using SharpDisasm;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

public partial class Tools : MainShared
{
	public partial class Unity
	{
		public partial class IL2CPP
        {
			public partial class Instance
			{
				public class InstanceCreation
				{
					#region VARIABLES
					bool Loaded = false;
					string SubUniqueLoadID = "";
					int SubToolGeneralLimit = 15000;

                    ulong AllocateSize = 0x20000;
					ulong AllocateStart = 0;
					ulong AddressArguments = 0;
					ulong AddressArgumentsData = 0;
					ulong AddressGlobalOutput = 0;
					ulong AddressFreeUse = 0;

					public string DefaultImage = "Assembly-CSharp";
					public string DefaultNamespace = "";
					public string DefaultClass = "";

                    Dictionary<string, ulong> BaseCache = new Dictionary<string, ulong>();

                    private struct GeneratedOffsets
                    {
                        public const ulong AddressArguments = 0x2000;
                        public const ulong AddressArgumentsData = 0x4000;
                        public const ulong AddressGlobalOutput = 0x6000;
                        public const ulong AddressFreeUse = 0x4C6;

                        public const ulong HK_NewInstance = 0x211;

                        public const ulong Sleep = 0x0;
                        public const ulong GetModuleHandleA = 0x8;
                        public const ulong GetProcAddress = 0x10;
                    }

                    public class Element
					{
						public short Offset = 0;
						public short Size = 0;

						public Element(short offset, short size)
						{
							Offset = offset;
							Size = size;
						}
					}

					public struct SearchTypes
					{
						public static short None = 0;
						public static short Equals = 1;
						public static short Contains = 2;
						public static short StartsWith = 3;
						public static short EndsWith = 4;
					}

					public struct ArgTypes
					{
						public static short Instance = 0;
						public static short Flag = 1;
					}

					public static class ArgStruct
					{
						public static Element ArgSize = new Element(offset: 0, size: 2);
						public static Element ArgType = new Element(offset: 2, size: 2);
						public static Element ImageNameSearchType = new Element(offset: 4, size: 2);
						public static Element NamespaceNameSearchType = new Element(offset: 6, size: 2);
						public static Element ClassNameSearchType = new Element(offset: 8, size: 2);
						public static Element OutputOffset = new Element(offset: 10, size: 8);
						public static Element ImageNamePtr = new Element(offset: 18, size: 8);
						public static Element NamespaceNamePtr = new Element(offset: 26, size: 8);
						public static Element ClassNamePtr = new Element(offset: 34, size: 8);
						public static Element Instances = new Element(offset: 42, size: 2);
						public static Element End = new Element(offset: 50, size: 0);
					}

					public static class OutputInstanceStruct
					{
						public static Element SlotCount = new Element(offset: 0, size: 2);
						public static Element FirstInstanceSlot = new Element(offset: 2, size: 8);
					}

					public static class OutputFlagStruct
					{
						public static Element FlagCounter = new Element(offset: 0, size: 8);
					}
                    #endregion
                    #region ASM_CODE
                    byte[] AsmCode = new byte[] {
    0x30, 0x90, 0x3C, 0x90, 0x0F, 0x90, 0xB9, 0x90, 0xFA, 0x90, 0x7F, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE0, 0x90, 0x8A, 0x90, 0x0F, 0x90, 0xB9, 0x90, 0xFA, 0x90, 0x7F, 0x90, 0x00, 0x90, 0x00, 0x90, 0x30, 0x90, 0x3C, 0x90, 0x0F, 0x90, 0xB9, 0x90, 0xFA, 0x90, 0x7F, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC9, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCA, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC1, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x01, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x0A, 0x90, 0x4D, 0x90, 0x39, 0x90, 0xC8, 0x90, 0x75, 0x90, 0x29, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x03, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x75, 0x90, 0x03, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xD2, 0x90, 0x74, 0x90, 0xD8, 0x90, 0x49, 0x90, 0x83, 0x90, 0xFA, 0x90, 0x01, 0x90, 0x75, 0x90, 0x02, 0x90, 0xEB, 0x90, 0x0C, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x41, 0x90, 0x54, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x41, 0x90, 0x57, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x49, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x00, 0x90, 0x74, 0x90, 0x0C, 0x90, 0x49, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x01, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xBD, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x0F, 0x90, 0x0B, 0x90, 0x49, 0x90, 0x89, 0x90, 0xCC, 0x90, 0x49, 0x90, 0x89, 0x90, 0xD5, 0x90, 0x4D, 0x90, 0x89, 0x90, 0xC6, 0x90, 0x48, 0x90, 0x6B, 0x90, 0xD2, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x02, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x02, 0x90, 0x49, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x08, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x49, 0x90, 0x39, 0x90, 0xD2, 0x90, 0x7D, 0x90, 0x0C, 0x90, 0x4A, 0x90, 0x39, 0x90, 0x1C, 0x90, 0x11, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x90, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0xEB, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x02, 0x90, 0x49, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x08, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x49, 0x90, 0x39, 0x90, 0xD2, 0x90, 0x7D, 0x90, 0x40, 0x90, 0x4A, 0x90, 0x83, 0x90, 0x3C, 0x90, 0x11, 0x90, 0x00, 0x90, 0x74, 0x90, 0x02, 0x90, 0xEB, 0x90, 0xEE, 0x90, 0x4A, 0x90, 0x89, 0x90, 0x1C, 0x90, 0x11, 0x90, 0x49, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x02, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xD0, 0x90, 0x49, 0x90, 0xC7, 0x90, 0xC7, 0x90, 0x08, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0xF7, 0x90, 0xF7, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xEA, 0x90, 0x48, 0x90, 0x39, 0x90, 0xD0, 0x90, 0x7E, 0x90, 0x07, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0x66, 0x90, 0x89, 0x90, 0x01, 0x90, 0xEB, 0x90, 0x3A, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xEA, 0x90, 0x4D, 0x90, 0x89, 0x90, 0xF0, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x01, 0x90, 0x48, 0x90, 0x6B, 0x90, 0xC0, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xE8, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x02, 0x90, 0x48, 0x90, 0x89, 0x90, 0x1C, 0x90, 0x01, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x01, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x48, 0x90, 0x39, 0x90, 0xD0, 0x90, 0x7E, 0x90, 0x07, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x66, 0x90, 0x89, 0x90, 0x01, 0x90, 0xEB, 0x90, 0x04, 0x90, 0x48, 0x90, 0x83, 0x90, 0x01, 0x90, 0x01, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x08, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0xC3, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x47, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x41, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x2E, 0x90, 0x64, 0x90, 0x6C, 0x90, 0x6C, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x6F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x73, 0x90, 0x70, 0x90, 0x61, 0x90, 0x63, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x67, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x67, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x50, 0x90, 0x53, 0x90, 0x51, 0x90, 0x52, 0x90, 0x56, 0x90, 0x57, 0x90, 0x55, 0x90, 0x54, 0x90, 0x41, 0x90, 0x50, 0x90, 0x41, 0x90, 0x51, 0x90, 0x41, 0x90, 0x52, 0x90, 0x41, 0x90, 0x53, 0x90, 0x41, 0x90, 0x54, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x41, 0x90, 0x57, 0x90, 0x9C, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x25, 0x90, 0x02, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x2D, 0x90, 0xBB, 0x90, 0x1D, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x0F, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x85, 0x90, 0xE8, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xAD, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xFF, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xF2, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x99, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xF1, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xD3, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xF7, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x73, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xEB, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xAD, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xEF, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x4D, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xE3, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x87, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xEC, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x27, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xE0, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x61, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xE5, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x01, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xD9, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x3B, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xDD, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x24, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0xC7, 0x90, 0x00, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x48, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x89, 0x90, 0xD9, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x0E, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x4E, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xF6, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC6, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x59, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xDE, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC5, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x60, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xC6, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x66, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xAE, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC4, 0x90, 0x48, 0x90, 0x83, 0x90, 0xED, 0x90, 0x32, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC5, 0x90, 0x32, 0x90, 0x66, 0x90, 0x83, 0x90, 0x7D, 0x90, 0x00, 0x90, 0x00, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x98, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x45, 0x90, 0x04, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x1F, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x01, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x4D, 0x90, 0x12, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE2, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x32, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0xCC, 0x90, 0xEB, 0x90, 0x02, 0x90, 0x0F, 0x90, 0x0B, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x45, 0x90, 0x06, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x1F, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x01, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x4D, 0x90, 0x1A, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xEA, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x09, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0xA3, 0x90, 0xEB, 0x90, 0x02, 0x90, 0x0F, 0x90, 0x0B, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x45, 0x90, 0x08, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x23, 0x90, 0x48, 0x90, 0x83, 0x90, 0xF8, 0x90, 0x01, 0x90, 0x75, 0x90, 0x1B, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x4D, 0x90, 0x22, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF2, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xE0, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x76, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xEB, 0x90, 0x02, 0x90, 0x0F, 0x90, 0x0B, 0x90, 0xEB, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x4D, 0x90, 0x0A, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x55, 0x90, 0x2A, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x45, 0x90, 0x02, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x0B, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x08, 0x90, 0x9D, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0x41, 0x90, 0x5B, 0x90, 0x41, 0x90, 0x5A, 0x90, 0x41, 0x90, 0x59, 0x90, 0x41, 0x90, 0x58, 0x90, 0x5C, 0x90, 0x5D, 0x90, 0x5F, 0x90, 0x5E, 0x90, 0x5A, 0x90, 0x59, 0x90, 0x5B, 0x90, 0x58, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xEB, 0x90, 0x08, 0x90, 0x60, 0x90, 0x44, 0x90, 0x90, 0x90, 0x7B, 0x90, 0xF9, 0x90, 0x7F, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x15, 0x90, 0xF2, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x90, 0x90, 0xEB, 0x90, 0x02, 0x90, 0x33, 0x90, 0xC0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xEB, 0x90, 0x08, 0x90, 0x11, 0x90, 0x02, 0x90, 0x9B, 0x90, 0x36, 0x90, 0xCF, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x15, 0x90, 0xF2, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x90, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xFF, 0x90, 0x25, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x41, 0x90, 0xFE, 0x90, 0x97, 0x90, 0x7B, 0x90, 0xF9, 0x90, 0x7F, 0x90, 0x00, 0x90, 0x00
};
                    #endregion

                    #region INTERNAL_API
                    internal InstanceWatcherBuildMultiple AddArgumentMultiple(short argType, short instances, string fullName, params string[] fieldsNames)
                    {
                        do
                        {
                            if (!Loaded) break;

							InstanceWatcherBuild baseWatcher = instanceCreation.AddArgument(ArgTypes.Instance, instances, fullName, fieldsNames);
							if (baseWatcher == null) break;

                            IntPtr basePtr = baseWatcher.Base;
                            if (basePtr == IntPtr.Zero) break;

                            List<IntPtr> watcherBasePointers = new List<IntPtr>();
                            for (int i = 0; i < instances; i++) watcherBasePointers.Add(basePtr + (0x8 * i));
                            return new InstanceWatcherBuildMultiple(watcherBasePointers.ToArray(), baseWatcher.Offsets);
                        }
                        while (false);
                        return null;
                    }

                    internal InstanceWatcherBuild AddArgument(short argType, short instances, string fullName, params string[] fieldsNames)
                    {
                        do
                        {
                            if (!Loaded) break;

                            // it can never be less than 1
                            if (instances < 1) instances = 1;

                            // names
                            string[] nameData = fullName.Split(':');

                            if (nameData.Length > 3)
                            {
                                TUtils.Print(DebugClass + "." + GetType().Name + "." +
                                MethodBase.GetCurrentMethod().Name + " | " + "More than 3 types detected: " + fullName); break;
                            }

                            string[] fullNameData = TArray.Merge(new string[3 - nameData.Length], nameData);
                            string imageName = fullNameData[0] ?? DefaultImage;
                            string namespaceName = fullNameData[1] ?? DefaultNamespace;
                            string className = fullNameData[2] ?? DefaultClass;

                            // get cached base pointer
                            string baseFullName = imageName + ":" + namespaceName + ":" + className;
                            ulong basePointer = 0;

                            if (BaseCache.ContainsKey(baseFullName))
                                basePointer = BaseCache[baseFullName];

                            // get path
                            OffsetResolver.PathInfo pathInfo = offsetResolver.GetPath(imageName, namespaceName, className, fieldsNames);
                            if (basePointer != 0) return new InstanceWatcherBuild((IntPtr)basePointer, pathInfo.Offsets);

                            if (pathInfo.DirectAddress != 0)
                            {
                                RefWriteBytes(ProcessInstance, AddressArgumentsData, BitConverter.GetBytes(pathInfo.DirectAddress));
                                AddressArgumentsData += 0x8;

                                BaseCache[baseFullName] = AddressArgumentsData - 0x8;
                                return new InstanceWatcherBuild((IntPtr)(AddressArgumentsData - 0x8), pathInfo.Offsets);
                            }

                            // bricks
                            short _argType = argType;
                            short _imageNameSearchType = 0;
                            short _namespaceNameSearchType = 0;
                            short _classNameSearchType = 0;
                            ulong _outputAddress = AddressGlobalOutput;
                            ulong _imageNamePtr = 0;
                            ulong _namespaceNamePtr = 0;
                            ulong _classNamePtr = 0;
                            short _instances = instances;

                            // no wildcards in mono, tuu hard, sadge
                            {
                                _imageNameSearchType = SearchTypes.Equals;
                                _namespaceNameSearchType = SearchTypes.Equals;
                                _classNameSearchType = SearchTypes.Equals;
                            }

                            // create string pointers
                            {
                                byte[] imageNameBytes = TUtils.StringToMultibyte(imageName + ".dll");
                                _imageNamePtr = AddressArgumentsData;
                                RefWriteBytes(ProcessInstance, AddressArgumentsData, imageNameBytes);
                                AddressArgumentsData += (ulong)imageNameBytes.Length;

                                byte[] namespaceNameBytes = TUtils.StringToMultibyte(namespaceName);
                                _namespaceNamePtr = AddressArgumentsData;
                                RefWriteBytes(ProcessInstance, AddressArgumentsData, namespaceNameBytes);
                                AddressArgumentsData += (ulong)namespaceNameBytes.Length;

                                byte[] classNameBytes = TUtils.StringToMultibyte(className);
                                _classNamePtr = AddressArgumentsData;
                                RefWriteBytes(ProcessInstance, AddressArgumentsData, classNameBytes);
                                AddressArgumentsData += (ulong)classNameBytes.Length;
                            }

                            // update output address for next argument
                            if (ArgTypes.Instance == argType)
                            {
                                AddressGlobalOutput += (ulong)((instances * 0x8) + OutputInstanceStruct.FirstInstanceSlot.Offset);
                                instanceDestroy.AddArgument(_outputAddress + (ulong)OutputInstanceStruct.FirstInstanceSlot.Offset, instances);
                            }
                            else if (ArgTypes.Flag == argType)
                            {
                                AddressGlobalOutput += (ulong)(instances * 0x8);
                            }

                            // build argument
                            byte[] argument = TArray.Merge(
                                BitConverter.GetBytes(ArgStruct.End.Offset),
                                BitConverter.GetBytes(argType),
                                BitConverter.GetBytes(_imageNameSearchType),
                                BitConverter.GetBytes(_namespaceNameSearchType),
                                BitConverter.GetBytes(_classNameSearchType),
                                BitConverter.GetBytes(_outputAddress),
                                BitConverter.GetBytes(_imageNamePtr),
                                BitConverter.GetBytes(_namespaceNamePtr),
                                BitConverter.GetBytes(_classNamePtr),
                                BitConverter.GetBytes(instances)
                            );

                            ulong returnUlong = 0;
                            if (ArgTypes.Instance == argType) returnUlong = _outputAddress + (ulong)OutputInstanceStruct.FirstInstanceSlot.Offset;
                            else if (ArgTypes.Flag == argType) returnUlong = _outputAddress + (ulong)OutputFlagStruct.FlagCounter.Offset;

                            RefWriteBytes(ProcessInstance, AddressArguments, argument);
                            AddressArguments += (ulong)ArgStruct.End.Offset;

                            // update other tool
                            if (ArgTypes.Instance == argType)
                            {
                                getInstances.AddArgument(_outputAddress, instances, imageName, namespaceName, className);
                            }

                            // return
                            BaseCache[baseFullName] = returnUlong;
                            return new InstanceWatcherBuild((IntPtr)returnUlong, pathInfo.Offsets);
                        }
                        while (false);
                        return null;
                    }
                    #endregion

                    public InstanceCreation()
                    {
                        try
                        {
                            do
                            {
                                BaseCache = new Dictionary<string, ulong>();

                                if (Allocate() != Result.Success) break;
                                if (WriteArgs() != Result.Success) break;
                                if (HookCode() != Result.Success) break;

								Loaded = true;
                                TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
									" | " + "[FINISHED]");
                            }
                            while (false);
                        }
                        catch { }
                    }

                    #region ALLOCATE
                    private Result Allocate()
                    {
                        Result result = Result.None;
                        try
                        {
                            do
                            {
                                AllocateStart = MemoryManager.AllocateSafe((int)AllocateSize, ToolUniqueID);
                                if (AllocateStart == 0) break;

                                byte[] decoded = TArray.DecodeBlock(AsmCode);
                                RefWriteBytes(ProcessInstance, AllocateStart, decoded);

                                AddressArguments = AllocateStart + GeneratedOffsets.AddressArguments;
                                AddressArgumentsData = AllocateStart + GeneratedOffsets.AddressArgumentsData;
                                AddressGlobalOutput = AllocateStart + GeneratedOffsets.AddressGlobalOutput;
                                AddressFreeUse = AllocateStart + GeneratedOffsets.AddressFreeUse;

                                result = Result.Success;
                            }
                            while (false);
                        }
                        catch { }
                        TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            " | " + "Result: " + result.ToString()); return result;
                    }
                    #endregion
                    #region WRITE_ARGS
                    private Result WriteArgs()
					{
                        int timeLimit = SubToolGeneralLimit;
                        Result result = Result.None;
                        try
						{
							while (SubToolGeneralLimit > 0)
							{
								do
								{
									try
									{
                                        if (!ReloadProcess()) throw new Exception();

                                        ulong moduleBase = TProcess.GetModuleBase(ProcessInstance, "kernel32.dll");
										if (moduleBase == 0) break;

										ulong _Sleep = TProcess.GetProcAddress(ProcessInstance, moduleBase, "Sleep");
										ulong _GetModuleHandleA = TProcess.GetProcAddress(ProcessInstance, moduleBase, "GetModuleHandleA");
										ulong _GetProcAddress = TProcess.GetProcAddress(ProcessInstance, moduleBase, "GetProcAddress");

										if (_Sleep == 0 || _GetModuleHandleA == 0 || _GetProcAddress == 0)
											break;

										RefWriteBytes(ProcessInstance, AllocateStart + GeneratedOffsets.Sleep, BitConverter.GetBytes(_Sleep));
										RefWriteBytes(ProcessInstance, AllocateStart + GeneratedOffsets.GetModuleHandleA, BitConverter.GetBytes(_GetModuleHandleA));
										RefWriteBytes(ProcessInstance, AllocateStart + GeneratedOffsets.GetProcAddress, BitConverter.GetBytes(_GetProcAddress));

                                        result = Result.Success;
									}
									catch { }
								}
								while (false);
								if (result != Result.None) break;
								Thread.Sleep(1000);
                                SubToolGeneralLimit -= 1000;
							}
						}
						catch { }
						TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
							" | " + "Result: " + result.ToString()); return result;
					}
					#endregion
					#region HOOK_CODE
					private Result HookCode()
					{
                        int timeLimit = SubToolGeneralLimit;
                        Result result = Result.None;
                        try
						{
							while (timeLimit > 0)
							{
								do
								{
                                    if (!ReloadProcess()) throw new Exception();

                                    // ---
                                    ulong il2cpp_object_new = TProcess.GetProcAddress(ProcessInstance, "GameAssembly.dll", "il2cpp_object_new");
									if (il2cpp_object_new == 0) break;

									// ---
									ulong jumpNative = AllocateStart + GeneratedOffsets.HK_NewInstance;
									ulong jumpHook = AddressFreeUse;

									ulong retAddress = TMemory.GetFunctionReturn(ProcessInstance, il2cpp_object_new);
									int minimumOverwrite = TMemory.GetMinimumOverwriteBackwards(ProcessInstance, retAddress, 14);

									ulong hookAddress = retAddress - (ulong)minimumOverwrite;

									byte[] stolenCode = TMemory.ReadMemoryBytes(ProcessInstance, hookAddress, minimumOverwrite);
									if (stolenCode == null || stolenCode.Length == 0) break;

									MemoryManager.AddOverwrite(hookAddress, stolenCode, ToolUniqueID);

                                    stolenCode = FixCall(stolenCode, hookAddress);

                                    RefWriteBytes(ProcessInstance, AddressFreeUse, stolenCode);
									AddressFreeUse += (ulong)stolenCode.Length;

									AddressFreeUse += TMemory.CreateAbsoluteCall(ProcessInstance, AddressFreeUse, jumpNative, 0x28);
									AddressFreeUse += TMemory.CreateAbsoluteJump(ProcessInstance, AddressFreeUse, retAddress);

									TMemory.CreateAbsoluteJump(ProcessInstance, hookAddress, jumpHook);

									result = Result.Success;

									//TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
										//" | " + "Hook: " + "0x" + hookAddress.ToString("X"));
								}
								while (false);
                                if (result != Result.None) break;
								Thread.Sleep(1000);
								timeLimit -= 1000;
							}
						}
						catch { }
						TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
							" | " + "Result: " + result.ToString()); return result;
					}
                    #endregion

                    #region INSTANCE_WATCHER
					public class InstanceWatcherBuild
					{
						public IntPtr Base;
						public int[] Offsets;

                        public InstanceWatcherBuild(IntPtr @base, int[] offsets)
                        {
                            Base = @base;
                            Offsets = offsets;
                        }
                    }

                    public class InstanceWatcherBuildMultiple
                    {
                        public IntPtr[] Base;
                        public int[] Offsets;

                        public InstanceWatcherBuildMultiple(IntPtr[] @base, int[] offsets)
                        {
                            Base = @base;
                            Offsets = offsets;
                        }
                    }
                    #endregion
                    #region FIX_CALL
                    private byte[] FixCall(byte[] bytes, ulong originalAddress)
                    {
                        Instruction[] instrs = TInstruction.GetInstructions2(bytes, originalAddress);
                        List<byte[]> result = new List<byte[]>();

                        ulong current = originalAddress;
                        foreach (Instruction ins in instrs)
                        {
                            string insText = ins.ToString();
                            byte[] insBytes = ins.Bytes;

                            if (insText.StartsWith("call ") && insBytes.Length == 5)
                            {
                                int value = BitConverter.ToInt32(insBytes, 1);
                                ulong destination = (ulong)((long)current + value + insBytes.Length);
                                insBytes = TMemory.GetAbsoluteCallBytes(destination);
                            }

                            result.Add(insBytes);
                            current += (ulong)insBytes.Length;
                        }

                        return TArray.Merge(result);
                    }
                    #endregion
                }
            }
		}
	}
}