using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Threading;

public partial class Tools : MainShared
{
	public partial class Unity
	{
		public partial class IL2CPP
		{
			public partial class Instance
			{
				internal class GetInstances
				{
                    #region VARIABLES
                    int SubToolGeneralLimit = 15000;

                    ulong AllocateSize = 0x20000;
                    ulong AllocateStart = 0;
                    ulong AddressArguments = 0;
                    ulong AddressArgumentsData = 0;
                    ulong AddressFreeUse = 0;

                    private struct GeneratedOffsets
                    {
                        public const ulong AddressArguments = 0x4000;
                        public const ulong AddressArgumentsData = 0x8000;
                        public const ulong AddressFreeUse = 0xAA0;

                        public const ulong HK_HookPoint = 0x4F8;

                        public const ulong Sleep = 0x0;
                        public const ulong GetModuleHandleA = 0x8;
                        public const ulong GetProcAddress = 0x10;
                        public const ulong NewSceneLoaded_Current = 0x18;
                        public const ulong IL2CPPCompile = 0x20;
                        public const ulong StopThread = 0x272;
                    }

                    public class Element
                    {
                        public short Offset = 0;
                        public short Size = 0;

                        public Element(short offset, short size)
                        {
                            Offset = offset;
                            Size = size;
                        }
                    }

                    public static class ArgStruct
                    {
                        public static Element ArgSize = new Element(offset: 0, size: 2);
                        public static Element OutputAddress = new Element(offset: 2, size: 8);
                        public static Element Instances = new Element(offset: 10, size: 2);
                        public static Element ImageNamePtr = new Element(offset: 12, size: 8);
                        public static Element NamespaceNamePtr = new Element(offset: 20, size: 8);
                        public static Element ClassNamePtr = new Element(offset: 28, size: 8);
                        public static Element End = new Element(offset: 36, size: 0);
                    }

                    #endregion
                    #region ASM_CODE
                    byte[] AsmCode = new byte[] {
    0x70, 0x90, 0x86, 0x90, 0xED, 0x90, 0x6B, 0x90, 0xFF, 0x90, 0x7F, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE0, 0x90, 0x8A, 0x90, 0xED, 0x90, 0x6B, 0x90, 0xFF, 0x90, 0x7F, 0x90, 0x00, 0x90, 0x00, 0x90, 0x30, 0x90, 0x3C, 0x90, 0xED, 0x90, 0x6B, 0x90, 0xFF, 0x90, 0x7F, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xC0, 0x90, 0xE2, 0x90, 0x2A, 0x90, 0x26, 0x90, 0xFE, 0x90, 0x7F, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x89, 0x90, 0x74, 0x90, 0x24, 0x90, 0x20, 0x90, 0x57, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x30, 0x90, 0x48, 0x90, 0x8D, 0x90, 0xB1, 0x90, 0x00, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x25, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xD1, 0x90, 0x29, 0x90, 0xEB, 0x90, 0x2A, 0x90, 0xFE, 0x90, 0x7F, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xEB, 0x90, 0x08, 0x90, 0x28, 0x90, 0x00, 0x90, 0x97, 0x90, 0x34, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x15, 0x90, 0xF2, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x90, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0xB9, 0x90, 0x18, 0x90, 0x00, 0x90, 0x97, 0x90, 0x34, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x83, 0x90, 0x01, 0x90, 0x01, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC9, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCA, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC1, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x01, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x0A, 0x90, 0x4D, 0x90, 0x39, 0x90, 0xC8, 0x90, 0x75, 0x90, 0x29, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x03, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x75, 0x90, 0x03, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xD2, 0x90, 0x74, 0x90, 0xD8, 0x90, 0x49, 0x90, 0x83, 0x90, 0xFA, 0x90, 0x01, 0x90, 0x75, 0x90, 0x02, 0x90, 0xEB, 0x90, 0x0C, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x37, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x41, 0x90, 0x54, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x41, 0x90, 0x57, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x49, 0x90, 0x89, 0x90, 0xCC, 0x90, 0x49, 0x90, 0x89, 0x90, 0xD5, 0x90, 0x4D, 0x90, 0x89, 0x90, 0xC6, 0x90, 0x48, 0x90, 0x6B, 0x90, 0xD2, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x02, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x02, 0x90, 0x49, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x08, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x49, 0x90, 0x39, 0x90, 0xD2, 0x90, 0x7D, 0x90, 0x0C, 0x90, 0x4E, 0x90, 0x39, 0x90, 0x04, 0x90, 0x11, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x8C, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0xEB, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x02, 0x90, 0x49, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x08, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x49, 0x90, 0x39, 0x90, 0xD2, 0x90, 0x7D, 0x90, 0x40, 0x90, 0x4A, 0x90, 0x83, 0x90, 0x3C, 0x90, 0x11, 0x90, 0x00, 0x90, 0x74, 0x90, 0x02, 0x90, 0xEB, 0x90, 0xEE, 0x90, 0x4E, 0x90, 0x89, 0x90, 0x04, 0x90, 0x11, 0x90, 0x49, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x02, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xD0, 0x90, 0x49, 0x90, 0xC7, 0x90, 0xC7, 0x90, 0x08, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0xF7, 0x90, 0xF7, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xEA, 0x90, 0x48, 0x90, 0x39, 0x90, 0xD0, 0x90, 0x7E, 0x90, 0x07, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0x66, 0x90, 0x89, 0x90, 0x01, 0x90, 0xEB, 0x90, 0x36, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xEA, 0x90, 0x4D, 0x90, 0x89, 0x90, 0xF0, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x01, 0x90, 0x48, 0x90, 0x6B, 0x90, 0xC0, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xE8, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x02, 0x90, 0x4C, 0x90, 0x89, 0x90, 0x04, 0x90, 0x01, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x01, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x48, 0x90, 0x39, 0x90, 0xD0, 0x90, 0x7E, 0x90, 0x07, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x66, 0x90, 0x89, 0x90, 0x01, 0x90, 0xEB, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0xC3, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x56, 0x90, 0x57, 0x90, 0x41, 0x90, 0x54, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x41, 0x90, 0x57, 0x90, 0x49, 0x90, 0x89, 0x90, 0xD7, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC9, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xCE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0xE2, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x14, 0x90, 0x24, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x08, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC5, 0x90, 0x49, 0x90, 0x89, 0x90, 0xD6, 0x90, 0x49, 0x90, 0x83, 0x90, 0xED, 0x90, 0x08, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC6, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC5, 0x90, 0x08, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xCE, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xF6, 0x90, 0x74, 0x90, 0x43, 0x90, 0x49, 0x90, 0x8B, 0x90, 0x7D, 0x90, 0x00, 0x90, 0x49, 0x90, 0x8B, 0x90, 0x4D, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x95, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x2D, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC4, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x89, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x19, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xFA, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x2A, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0xB6, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE0, 0x90, 0xEB, 0x90, 0x10, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x89, 0x90, 0xF8, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0x5F, 0x90, 0x5E, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xED, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0x38, 0x90, 0x00, 0x90, 0x75, 0x90, 0x21, 0x90, 0x48, 0x90, 0x85, 0x90, 0xED, 0x90, 0x74, 0x90, 0x1C, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCD, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC1, 0x90, 0x64, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x1E, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0x03, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x47, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x41, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x2E, 0x90, 0x64, 0x90, 0x6C, 0x90, 0x6C, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x64, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x68, 0x90, 0x72, 0x90, 0x65, 0x90, 0x61, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x74, 0x90, 0x74, 0x90, 0x61, 0x90, 0x63, 0x90, 0x68, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x68, 0x90, 0x72, 0x90, 0x65, 0x90, 0x61, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x64, 0x90, 0x65, 0x90, 0x74, 0x90, 0x61, 0x90, 0x63, 0x90, 0x68, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x64, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x69, 0x90, 0x65, 0x90, 0x73, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x67, 0x90, 0x65, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x67, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x72, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x74, 0x90, 0x68, 0x90, 0x6F, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x72, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x72, 0x90, 0x75, 0x90, 0x6E, 0x90, 0x74, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x76, 0x90, 0x6F, 0x90, 0x6B, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x73, 0x90, 0x74, 0x90, 0x72, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x67, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x65, 0x90, 0x77, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x69, 0x90, 0x65, 0x90, 0x6C, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x72, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x69, 0x90, 0x6C, 0x90, 0x32, 0x90, 0x63, 0x90, 0x70, 0x90, 0x70, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x69, 0x90, 0x65, 0x90, 0x6C, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x73, 0x90, 0x74, 0x90, 0x61, 0x90, 0x74, 0x90, 0x69, 0x90, 0x63, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x76, 0x90, 0x61, 0x90, 0x6C, 0x90, 0x75, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x55, 0x90, 0x6E, 0x90, 0x69, 0x90, 0x74, 0x90, 0x79, 0x90, 0x45, 0x90, 0x6E, 0x90, 0x67, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x65, 0x90, 0x2E, 0x90, 0x52, 0x90, 0x65, 0x90, 0x73, 0x90, 0x6F, 0x90, 0x75, 0x90, 0x72, 0x90, 0x63, 0x90, 0x65, 0x90, 0x73, 0x90, 0x41, 0x90, 0x50, 0x90, 0x49, 0x90, 0x49, 0x90, 0x6E, 0x90, 0x74, 0x90, 0x65, 0x90, 0x72, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6C, 0x90, 0x3A, 0x90, 0x3A, 0x90, 0x46, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x64, 0x90, 0x4F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x73, 0x90, 0x4F, 0x90, 0x66, 0x90, 0x54, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x41, 0x90, 0x6C, 0x90, 0x6C, 0x90, 0x28, 0x90, 0x53, 0x90, 0x79, 0x90, 0x73, 0x90, 0x74, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x2E, 0x90, 0x54, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x29, 0x90, 0x00, 0x90, 0x55, 0x90, 0x6E, 0x90, 0x69, 0x90, 0x74, 0x90, 0x79, 0x90, 0x45, 0x90, 0x6E, 0x90, 0x67, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x65, 0x90, 0x2E, 0x90, 0x52, 0x90, 0x65, 0x90, 0x73, 0x90, 0x6F, 0x90, 0x75, 0x90, 0x72, 0x90, 0x63, 0x90, 0x65, 0x90, 0x73, 0x90, 0x3A, 0x90, 0x3A, 0x90, 0x46, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x64, 0x90, 0x4F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x73, 0x90, 0x4F, 0x90, 0x66, 0x90, 0x54, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x41, 0x90, 0x6C, 0x90, 0x6C, 0x90, 0x28, 0x90, 0x53, 0x90, 0x79, 0x90, 0x73, 0x90, 0x74, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x2E, 0x90, 0x54, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x29, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x50, 0x90, 0x53, 0x90, 0x51, 0x90, 0x52, 0x90, 0x56, 0x90, 0x57, 0x90, 0x55, 0x90, 0x54, 0x90, 0x41, 0x90, 0x50, 0x90, 0x41, 0x90, 0x51, 0x90, 0x41, 0x90, 0x52, 0x90, 0x41, 0x90, 0x53, 0x90, 0x41, 0x90, 0x54, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x41, 0x90, 0x57, 0x90, 0x9C, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x1D, 0x90, 0xE0, 0x90, 0x3A, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC5, 0x90, 0x1E, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x6B, 0x90, 0xED, 0x90, 0x0A, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xD7, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x7B, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x14, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x33, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x2C, 0x90, 0x05, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0xD7, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xB3, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x5D, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x14, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x04, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xFD, 0x90, 0x04, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0xA8, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x4D, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x7D, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x41, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xCE, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xC7, 0x90, 0x04, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0x6F, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x31, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x44, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x25, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x95, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x8E, 0x90, 0x04, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0x36, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x15, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x0B, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x09, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x5C, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x55, 0x90, 0x04, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0xFD, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x73, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xD2, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xED, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x23, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x1C, 0x90, 0x04, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0xC4, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x42, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x99, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xCE, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xEA, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xE3, 0x90, 0x03, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0x8B, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x11, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x60, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xAB, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xB1, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xAA, 0x90, 0x03, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0x52, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x9D, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x27, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x91, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x78, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x71, 0x90, 0x03, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0x19, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x8E, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xEE, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x82, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x3F, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x38, 0x90, 0x03, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0xE0, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x73, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xB5, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x67, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x06, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xFF, 0x90, 0x02, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0xA7, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x54, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x7C, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x48, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xCD, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xC6, 0x90, 0x02, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0x6E, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x39, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x43, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x2D, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x94, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x8D, 0x90, 0x02, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0x35, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x1F, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x0A, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x13, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x5B, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x54, 0x90, 0x02, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0xFC, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x0F, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xD1, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x03, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x22, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x1B, 0x90, 0x02, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0xC3, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xFC, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x5F, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x14, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xF3, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xEC, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0xDE, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xD5, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xC0, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xC9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x72, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x53, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xFF, 0x90, 0x10, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x5B, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x05, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC6, 0x90, 0xEB, 0x90, 0x3F, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xEC, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xC0, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xC9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x45, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x53, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xFF, 0x90, 0x10, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x5B, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x87, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x80, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0x6F, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC6, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEB, 0x90, 0x24, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC3, 0x90, 0x24, 0x90, 0x66, 0x90, 0x83, 0x90, 0x3B, 0x90, 0x00, 0x90, 0x75, 0x90, 0x4C, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xFE, 0x90, 0xF6, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xCF, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x59, 0x90, 0x48, 0x90, 0x39, 0x90, 0xC8, 0x90, 0x74, 0x90, 0x25, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xC2, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x1D, 0x90, 0xC8, 0x90, 0x36, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x3B, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x34, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0xBA, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x27, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x20, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0xA6, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x53, 0x90, 0x0C, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x52, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x14, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xFE, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xF7, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0xD7, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x1E, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x53, 0x90, 0x14, 0x90, 0x4C, 0x90, 0x8B, 0x90, 0x43, 0x90, 0x1C, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xD7, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC5, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x3F, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x14, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xAD, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xA6, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0x86, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x39, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x17, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x88, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x81, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xE9, 0x90, 0x5E, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0x48, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xC0, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xC9, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF0, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xEE, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x6B, 0x90, 0x0A, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x18, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x08, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xD9, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC2, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x51, 0x90, 0x52, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x02, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x4B, 0x90, 0x02, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x53, 0x90, 0x0A, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC0, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x78, 0x90, 0xF6, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x5A, 0x90, 0x59, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC9, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xCD, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x97, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xED, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x8E, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xEB, 0x90, 0xBE, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x08, 0x90, 0x9D, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0x41, 0x90, 0x5B, 0x90, 0x41, 0x90, 0x5A, 0x90, 0x41, 0x90, 0x59, 0x90, 0x41, 0x90, 0x58, 0x90, 0x5C, 0x90, 0x5D, 0x90, 0x5F, 0x90, 0x5E, 0x90, 0x5A, 0x90, 0x59, 0x90, 0x5B, 0x90, 0x58, 0x90, 0xC3
};
                    #endregion

                    #region INTERNAL_API
                    internal void AddArgument(ulong outputAddress, short instances, string imageName, string namespaceName, string className)
                    {
                        // it can never be less than 1
                        if (instances < 1) instances = 1;

                        // bricks
                        ulong _outputAddress = outputAddress;
                        ulong _imageNamePtr = 0;
                        ulong _namespaceNamePtr = 0;
                        ulong _classNamePtr = 0;
                        short _instances = instances;

                        // create string pointers
                        {
                            {
                                _imageNamePtr = AddressArgumentsData;
                                byte[] textBytes = TUtils.StringToMultibyte(imageName + ".dll");
                                RefWriteBytes(ProcessInstance, AddressArgumentsData, textBytes);
                                AddressArgumentsData += (ulong)textBytes.Length;
                            }

                            {
                                _namespaceNamePtr = AddressArgumentsData;
                                byte[] textBytes = TUtils.StringToMultibyte(namespaceName);
                                RefWriteBytes(ProcessInstance, AddressArgumentsData, textBytes);
                                AddressArgumentsData += (ulong)textBytes.Length;
                            }

                            {
                                _classNamePtr = AddressArgumentsData;
                                byte[] textBytes = TUtils.StringToMultibyte(className);
                                RefWriteBytes(ProcessInstance, AddressArgumentsData, textBytes);
                                AddressArgumentsData += (ulong)textBytes.Length;
                            }
                        }

                        // build argument
                        byte[] argument = TArray.Merge(
                            BitConverter.GetBytes(ArgStruct.End.Offset),
                            BitConverter.GetBytes(_outputAddress),
                            BitConverter.GetBytes(instances),
                            BitConverter.GetBytes(_imageNamePtr),
                            BitConverter.GetBytes(_namespaceNamePtr),
                            BitConverter.GetBytes(_classNamePtr)
                        );

                        // write argument bytes
                        RefWriteBytes(ProcessInstance, AddressArguments, argument);
                        AddressArguments += (ulong)ArgStruct.End.Offset;
                    }
                    #endregion

                    public GetInstances()
                    {
                        try
                        {
                            do
                            {
                                if (Allocate() != Result.Success) break;
                                if (WriteArgs() != Result.Success) break;

                                TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                                    " | " + "[FINISHED]");
                            }
                            while (false);
                        }
                        catch { }
                    }

                    #region ALLOCATE
                    private Result Allocate()
                    {
                        Result result = Result.None;
                        try
                        {
                            do
                            {
                                AllocateStart = MemoryManager.AllocateTimeLimited((int)AllocateSize, 180000);
                                if (AllocateStart == 0) break;

                                byte[] decoded = TArray.DecodeBlock(AsmCode);
                                RefWriteBytes(ProcessInstance, AllocateStart, decoded);

                                AddressArguments = AllocateStart + GeneratedOffsets.AddressArguments;
                                AddressArgumentsData = AllocateStart + GeneratedOffsets.AddressArgumentsData;
                                AddressFreeUse = AllocateStart + GeneratedOffsets.AddressFreeUse;

                                result = Result.Success;
                            }
                            while (false);
                        }
                        catch { }
                        TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            " | " + "Result: " + result.ToString()); return result;
                    }
                    #endregion
                    #region WRITE_ARGS
                    private Result WriteArgs()
                    {
                        Result result = Result.None;
                        do
                        {
                            if (!ReloadProcess()) throw new Exception();

                            // ---
                            {
                                ulong _IL2CPPCompile = 0;
                                {
                                    ulong gameAssemblyBase = TProcess.GetModuleBase(ProcessInstance, "GameAssembly.dll");
                                    ulong gameAssemblyEnd = TProcess.GetModuleEnd(ProcessInstance, "GameAssembly.dll");
                                    if (gameAssemblyBase == 0 || gameAssemblyEnd == 0) break;

                                    if (_IL2CPPCompile == 0)
                                    {
                                        try
                                        {
                                            do
                                            {
                                                ulong address = TMemory.ScanSingle(ProcessInstance, "40 53 48 83 EC 20 48 8B D9 E8 ?? ?? ?? ?? 48 85 C0 74 06 48 83 C4 20 5B C3 48 8B CB E8 ?? ?? ?? ?? 48 8B C8 33 D2 E8", "GameAssembly.dll", 0x20);
                                                if (address == 0) break;

                                                _IL2CPPCompile = (ulong)(((long)address + 9) + TMemory.ReadMemory<int>(ProcessInstance, address + 10) + 5);
                                                if (_IL2CPPCompile < gameAssemblyBase || _IL2CPPCompile >= gameAssemblyEnd)
                                                    break;
                                            }
                                            while (false);
                                        }
                                        catch { }
                                    }

                                    if (_IL2CPPCompile == 0)
                                    {
                                        try
                                        {
                                            do
                                            {
                                                ulong address = TMemory.ScanSingle(ProcessInstance, "48 8B 05 ?? ?? ?? ?? 48 85 C0 75 ?? 48 8D 0D ?? ?? ?? ?? E8", "GameAssembly.dll", 0x20);
                                                if (address == 0) break;

                                                {
                                                    int value = TMemory.ReadMemory<int>(ProcessInstance, address + 15);
                                                    ulong resolved = (ulong)((long)address + 12 + value + 7);

                                                    byte[] nameBytes = TMemory.ReadMemoryBytes(ProcessInstance, resolved, 11);
                                                    if (nameBytes == null) break;

                                                    string name = TUtils.MultibyteToString(nameBytes);
                                                    if (name != "UnityEngine") break;
                                                }

                                                {
                                                    int value = TMemory.ReadMemory<int>(ProcessInstance, address + 20);
                                                    _IL2CPPCompile = (ulong)((long)address + 19 + value + 5);
                                                }
                                            }
                                            while (false);
                                        }
                                        catch { }
                                    }

                                    if (_IL2CPPCompile == 0) break;
                                    else RefWriteBytes(ProcessInstance, AllocateStart + GeneratedOffsets.IL2CPPCompile,
                                            BitConverter.GetBytes(_IL2CPPCompile));
                                }
                            }

                            // ---
                            {
                                ulong kernel32Base = TProcess.GetModuleBase(ProcessInstance, "kernel32.dll");
                                if (kernel32Base == 0) break;

                                ulong _Sleep = TProcess.GetProcAddress(ProcessInstance, kernel32Base, "Sleep");
                                ulong _GetModuleHandleA = TProcess.GetProcAddress(ProcessInstance, kernel32Base, "GetModuleHandleA");
                                ulong _GetProcAddress = TProcess.GetProcAddress(ProcessInstance, kernel32Base, "GetProcAddress");
                                if (_Sleep == 0 || _GetModuleHandleA == 0 || _GetProcAddress == 0)
                                    break;

                                RefWriteBytes(ProcessInstance, AllocateStart + GeneratedOffsets.Sleep, BitConverter.GetBytes(_Sleep));
                                RefWriteBytes(ProcessInstance, AllocateStart + GeneratedOffsets.GetModuleHandleA, BitConverter.GetBytes(_GetModuleHandleA));
                                RefWriteBytes(ProcessInstance, AllocateStart + GeneratedOffsets.GetProcAddress, BitConverter.GetBytes(_GetProcAddress));
                            }

                            // ---
                            {
                                do
                                {
                                    ulong function = TMemory.ScanSingle(ProcessInstance, "8B ?? ?? 03 00 00 8D ?? FF A9 FA FF FF FF 75 05", "UnityPlayer.dll", 0x20);
                                    if (function == 0) TMemory.ScanSingle(ProcessInstance, "8B ?? ?? 04 00 00 8D ?? FF A9 FA FF FF FF 75 05", "UnityPlayer.dll", 0x20);
                                    if (function == 0) TMemory.ScanSingle(ProcessInstance, "8B ?? ?? 03 00 00 FF ?? A9 FB FF FF FF 74 ?? 48", "UnityPlayer.dll", 0x20);
                                    if (function == 0) break;

                                    // ---
                                    function = TMemory.GetFunctionStart(ProcessInstance, function);
                                    if (function == 0) break;

                                    int minimumOverwrite = TInstruction.GetMinimumOverwrite(ProcessInstance, function, 14);
                                    if (minimumOverwrite == 0) break;

                                    byte[] stolen = TMemory.ReadMemoryBytes(ProcessInstance, function, minimumOverwrite);
                                    MemoryManager.AddOverwrite(function, stolen, ToolUniqueID);

                                    // ---
                                    ulong preFun = AddressFreeUse;

                                    RefWriteBytes(ProcessInstance, AddressFreeUse, stolen);
                                    AddressFreeUse += (ulong)stolen.Length;
                                    AddressFreeUse += TMemory.CreateAbsoluteJump(ProcessInstance, AddressFreeUse, function + (ulong)minimumOverwrite);

                                    ulong hookPoint = AddressFreeUse;
                                    AddressFreeUse += TMemory.CreateAbsoluteCall(ProcessInstance, AddressFreeUse, preFun, 0x28);
                                    byte[] update = new byte[]
                                    {
                                        0x48, 0xB9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // mov rcx, value
                                        0x83, 0x01, 0x01, // add dword ptr [rcx], 0x1
                                        0xC3 // ret
                                    };
                                    TArray.Insert(update, BitConverter.GetBytes(AllocateStart + GeneratedOffsets.NewSceneLoaded_Current), 2);

                                    RefWriteBytes(ProcessInstance, AddressFreeUse, update);
                                    AddressFreeUse += (ulong)update.Length;

                                    TMemory.CreateAbsoluteJump(ProcessInstance, function, hookPoint);
                                }
                                while (false);
                            }

                            // ---
                            {
                                MemoryManager.AddOverwrite(AllocateStart + GeneratedOffsets.StopThread, BitConverter.GetBytes((ulong)1), ToolUniqueID);
                                TProcess.CreateRemoteThread(ProcessInstance, AllocateStart + GeneratedOffsets.HK_HookPoint);
                            }

                            result = Result.Success;
                        }
                        while (false);
                        TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            " | " + "Result: " + result.ToString()); return result;
                    }
                    #endregion
				}
			}
		}
	}
}