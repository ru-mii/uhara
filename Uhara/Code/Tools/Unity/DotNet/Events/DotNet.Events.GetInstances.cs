using System;
using System.Collections.Generic;
using System.Reflection;
using System.Threading;

public partial class Tools : MainShared
{
	public partial class Unity
	{
		public partial class DotNet
		{
			public partial class Events
			{
				internal class GetInstances
				{
                    #region VARIABLES
                    bool Loaded = false;
                    int SubToolGeneralLimit = 30000;

                    ulong AllocateSize = 0x20000;
                    ulong AllocateStart = 0;
                    ulong AddressArguments = 0;
                    ulong AddressArgumentsData = 0;
                    ulong AddressGlobalOutput = 0;
                    ulong AddressFreeUse = 0;

                    private struct GeneratedOffsets
                    {
                        public const ulong AddressArguments = 0x4000;
                        public const ulong AddressArgumentsData = 0x8000;
                        public const ulong AddressFreeUse = 0x920;

                        public const ulong HK_GetInstances = 0x438;

                        public const ulong FUNCTIONPTR_Sleep = 0x2B2;
                        public const ulong FUNCTIONPTR_GetModuleHandleA = 0x2BA;
                        public const ulong FUNCTIONPTR_GetProcAddress = 0x2C2;
                    }

                    public class Element
                    {
                        public short Offset = 0;
                        public short Size = 0;

                        public Element(short offset, short size)
                        {
                            Offset = offset;
                            Size = size;
                        }
                    }

                    public static class ArgStruct
                    {
                        public static Element ArgSize = new Element(offset: 0, size: 2);
                        public static Element OutputAddress = new Element(offset: 2, size: 8);
                        public static Element Instances = new Element(offset: 10, size: 2);
                        public static Element FullNamePtr = new Element(offset: 12, size: 8);
                        public static Element End = new Element(offset: 20, size: 0);
                    }

                    #endregion
                    #region ASM_CODE
                    byte[] AsmCode = new byte[] {
    0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x2D, 0x90, 0x32, 0x90, 0x2E, 0x90, 0x30, 0x90, 0x2D, 0x90, 0x62, 0x90, 0x64, 0x90, 0x77, 0x90, 0x67, 0x90, 0x63, 0x90, 0x2E, 0x90, 0x64, 0x90, 0x6C, 0x90, 0x6C, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x67, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x72, 0x90, 0x6F, 0x90, 0x6F, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x64, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x68, 0x90, 0x72, 0x90, 0x65, 0x90, 0x61, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x74, 0x90, 0x74, 0x90, 0x61, 0x90, 0x63, 0x90, 0x68, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x64, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x5F, 0x90, 0x6F, 0x90, 0x70, 0x90, 0x65, 0x90, 0x6E, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x72, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x74, 0x90, 0x68, 0x90, 0x6F, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x72, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x73, 0x90, 0x74, 0x90, 0x72, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x67, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x65, 0x90, 0x77, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x72, 0x90, 0x75, 0x90, 0x6E, 0x90, 0x74, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x76, 0x90, 0x6F, 0x90, 0x6B, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x6F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x65, 0x90, 0x77, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x6F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x73, 0x90, 0x70, 0x90, 0x61, 0x90, 0x63, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x67, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x67, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x6F, 0x90, 0x72, 0x90, 0x65, 0x90, 0x61, 0x90, 0x63, 0x90, 0x68, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x55, 0x90, 0x6E, 0x90, 0x69, 0x90, 0x74, 0x90, 0x79, 0x90, 0x45, 0x90, 0x6E, 0x90, 0x67, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x65, 0x90, 0x2E, 0x90, 0x43, 0x90, 0x6F, 0x90, 0x72, 0x90, 0x65, 0x90, 0x4D, 0x90, 0x6F, 0x90, 0x64, 0x90, 0x75, 0x90, 0x6C, 0x90, 0x65, 0x90, 0x00, 0x90, 0x55, 0x90, 0x6E, 0x90, 0x69, 0x90, 0x74, 0x90, 0x79, 0x90, 0x45, 0x90, 0x6E, 0x90, 0x67, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x65, 0x90, 0x00, 0x90, 0x4F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x00, 0x90, 0x46, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x64, 0x90, 0x4F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x73, 0x90, 0x4F, 0x90, 0x66, 0x90, 0x54, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x41, 0x90, 0x6C, 0x90, 0x6C, 0x90, 0x00, 0x90, 0x52, 0x90, 0x65, 0x90, 0x73, 0x90, 0x6F, 0x90, 0x75, 0x90, 0x72, 0x90, 0x63, 0x90, 0x65, 0x90, 0x73, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x73, 0x90, 0x63, 0x90, 0x6F, 0x90, 0x72, 0x90, 0x6C, 0x90, 0x69, 0x90, 0x62, 0x90, 0x00, 0x90, 0x53, 0x90, 0x79, 0x90, 0x73, 0x90, 0x74, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x00, 0x90, 0x54, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x00, 0x90, 0x47, 0x90, 0x65, 0x90, 0x74, 0x90, 0x54, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC9, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCA, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC1, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x01, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x0A, 0x90, 0x4D, 0x90, 0x39, 0x90, 0xC8, 0x90, 0x75, 0x90, 0x29, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x03, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x75, 0x90, 0x03, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xD2, 0x90, 0x74, 0x90, 0xD8, 0x90, 0x49, 0x90, 0x83, 0x90, 0xFA, 0x90, 0x01, 0x90, 0x75, 0x90, 0x02, 0x90, 0xEB, 0x90, 0x0C, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x8D, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x56, 0x90, 0x57, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x18, 0x90, 0x48, 0x90, 0x89, 0x90, 0xCE, 0x90, 0x48, 0x90, 0x89, 0x90, 0xD7, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x46, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x35, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x3D, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x24, 0x90, 0x48, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x09, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC2, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x5F, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x0D, 0x90, 0x48, 0x90, 0x89, 0x90, 0xF1, 0x90, 0x48, 0x90, 0x89, 0x90, 0xFA, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0x0A, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x18, 0x90, 0x5F, 0x90, 0x5E, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x41, 0x90, 0x54, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x41, 0x90, 0x57, 0x90, 0x49, 0x90, 0x89, 0x90, 0xCC, 0x90, 0x49, 0x90, 0x89, 0x90, 0xD5, 0x90, 0x4D, 0x90, 0x89, 0x90, 0xC6, 0x90, 0x48, 0x90, 0x6B, 0x90, 0xD2, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x02, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x02, 0x90, 0x49, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x08, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x49, 0x90, 0x39, 0x90, 0xD2, 0x90, 0x7D, 0x90, 0x3E, 0x90, 0x4A, 0x90, 0x83, 0x90, 0x3C, 0x90, 0x11, 0x90, 0x00, 0x90, 0x75, 0x90, 0xF0, 0x90, 0x4E, 0x90, 0x89, 0x90, 0x04, 0x90, 0x11, 0x90, 0x49, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x02, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xD0, 0x90, 0x49, 0x90, 0xC7, 0x90, 0xC7, 0x90, 0x08, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0xF7, 0x90, 0xF7, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xEA, 0x90, 0x48, 0x90, 0x39, 0x90, 0xD0, 0x90, 0x7E, 0x90, 0x07, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0x66, 0x90, 0x89, 0x90, 0x01, 0x90, 0xEB, 0x90, 0x36, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xEA, 0x90, 0x4D, 0x90, 0x89, 0x90, 0xF0, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x01, 0x90, 0x48, 0x90, 0x6B, 0x90, 0xC0, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xE8, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x02, 0x90, 0x4C, 0x90, 0x89, 0x90, 0x04, 0x90, 0x01, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x01, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x48, 0x90, 0x39, 0x90, 0xD0, 0x90, 0x7E, 0x90, 0x07, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x66, 0x90, 0x89, 0x90, 0x01, 0x90, 0xEB, 0x90, 0x00, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x50, 0x90, 0x53, 0x90, 0x51, 0x90, 0x52, 0x90, 0x56, 0x90, 0x57, 0x90, 0x55, 0x90, 0x54, 0x90, 0x41, 0x90, 0x50, 0x90, 0x41, 0x90, 0x51, 0x90, 0x41, 0x90, 0x52, 0x90, 0x41, 0x90, 0x53, 0x90, 0x41, 0x90, 0x54, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x41, 0x90, 0x57, 0x90, 0x9C, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x1D, 0x90, 0xA0, 0x90, 0x3B, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC5, 0x90, 0x1E, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xEB, 0x90, 0x1C, 0x90, 0x48, 0x90, 0x85, 0x90, 0xED, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x8C, 0x90, 0x04, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCD, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC1, 0x90, 0xE8, 0x90, 0x03, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x98, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x2F, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x05, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0xCF, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x1F, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x15, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0xB4, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x4C, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xFD, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x08, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x92, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x32, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xDB, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xF9, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x6C, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x14, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xB5, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x93, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x46, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xD6, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x8F, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xC7, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x20, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xD0, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x69, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xB6, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xFA, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xB2, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x43, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xB0, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xD4, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x94, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x1D, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x9A, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xAE, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x76, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xF7, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x2D, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x88, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x98, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xD1, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x1D, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x62, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x7A, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xAB, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x0E, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x3C, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x5C, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xCB, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x20, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xBB, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x08, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xC8, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x49, 0x90, 0x89, 0x90, 0xE0, 0x90, 0x49, 0x90, 0xC7, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0xE2, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xC8, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x02, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x30, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xEF, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x30, 0x90, 0x5A, 0x90, 0x41, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xC0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xC2, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x50, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xAD, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC6, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF1, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x9A, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x4C, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xBB, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x4A, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x24, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x8E, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x33, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x05, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC6, 0x90, 0xEB, 0x90, 0x49, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF1, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x57, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x4C, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x5C, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x07, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x44, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x47, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xEC, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x21, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC6, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xDE, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x49, 0x90, 0x89, 0x90, 0xE0, 0x90, 0x49, 0x90, 0xC7, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0xE2, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x27, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x02, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x09, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x30, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x30, 0x90, 0x5A, 0x90, 0x41, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xC0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xD8, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x66, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xC3, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC5, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xEB, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x4C, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xEB, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x60, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x9D, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xD4, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x45, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x7A, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC5, 0x90, 0xEB, 0x90, 0x1C, 0x90, 0x48, 0x90, 0x85, 0x90, 0xED, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x01, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCD, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC1, 0x90, 0xE8, 0x90, 0x03, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x0D, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEB, 0x90, 0x14, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC3, 0x90, 0x14, 0x90, 0x66, 0x90, 0x83, 0x90, 0x3B, 0x90, 0x00, 0x90, 0x74, 0x90, 0xD6, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x53, 0x90, 0x0C, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x05, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0xE1, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0xE2, 0x90, 0x48, 0x90, 0xC7, 0x90, 0x02, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0xE1, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC8, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE9, 0x90, 0x48, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC0, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xC9, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xD8, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x30, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x30, 0x90, 0x59, 0x90, 0x5A, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0xA2, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0xE2, 0x90, 0x48, 0x90, 0xC7, 0x90, 0x02, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0xE1, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC8, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF1, 0x90, 0x48, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC0, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xC9, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x99, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x30, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x30, 0x90, 0x59, 0x90, 0x5A, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x5F, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x18, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x08, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x4F, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC0, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC2, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEA, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x51, 0x90, 0x52, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x02, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x4B, 0x90, 0x02, 0x90, 0x48, 0x90, 0x0F, 0x90, 0xB7, 0x90, 0x53, 0x90, 0x0A, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC0, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x9A, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x5A, 0x90, 0x59, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC9, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x18, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xEB, 0x90, 0xD2, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x08, 0x90, 0x9D, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0x41, 0x90, 0x5B, 0x90, 0x41, 0x90, 0x5A, 0x90, 0x41, 0x90, 0x59, 0x90, 0x41, 0x90, 0x58, 0x90, 0x5C, 0x90, 0x5D, 0x90, 0x5F, 0x90, 0x5E, 0x90, 0x5A, 0x90, 0x59, 0x90, 0x5B, 0x90, 0x58, 0x90, 0xC3
};
                    #endregion

                    #region INTERNAL_API
                    internal void AddArgument(ulong outputAddress, short instances, string imageName, string namespaceName, string className)
                    {
                        do
                        {
                            if (!Loaded) break;

                            // it can never be less than 1
                            if (instances < 1) instances = 1;

                            // bricks
                            ulong _outputAddress = outputAddress;
                            ulong _fullNamePtr = 0;
                            short _instances = instances;

                            // convert name
                            string fullName;
                            if (namespaceName == "") fullName = className + ", " + imageName;
                            else fullName = namespaceName + "." + className + ", " + imageName;

                            // create string pointer
                            _fullNamePtr = AddressArgumentsData;
                            byte[] fullNameBytes = TUtils.StringToMultibyte(fullName);
                            RefWriteBytes(Instance, AddressArgumentsData, fullNameBytes);
                            AddressArgumentsData += (ulong)fullNameBytes.Length;

                            // build argument
                            byte[] argument = TArray.Merge(
                                BitConverter.GetBytes(ArgStruct.End.Offset),
                                BitConverter.GetBytes(_outputAddress),
                                BitConverter.GetBytes(instances),
                                BitConverter.GetBytes(_fullNamePtr)
                            );

                            // write argument bytes
                            RefWriteBytes(Instance, AddressArguments, argument);
                            AddressArguments += (ulong)ArgStruct.End.Offset;
                        }
                        while (false);
                    }
                    #endregion

                    #region CONSTRUCTOR
                    public GetInstances()
                    {
                        try
                        {
                            do
                            {
                                if (!Allocate()) break;
                                if (!WriteArgs()) break;
                                if (!Execute()) break;

                                Loaded = true;
                                TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                                    "\t\t\t\t\t" + "[FINISHED]");
                            }
                            while (false);
                        }
                        catch { }
                    }
                    #endregion
                    #region ALLOCATE
                    private bool Allocate()
                    {
                        bool success = false;
                        try
                        {
                            do
                            {
                                AllocateStart = MemoryManager.AllocateTimeLimited((int)AllocateSize, 60000);
                                if (AllocateStart == 0) break;

                                byte[] decoded = TArray.DecodeBlock(AsmCode);
                                RefWriteBytes(Instance, AllocateStart, decoded);

                                AddressArguments = AllocateStart + GeneratedOffsets.AddressArguments;
                                AddressArgumentsData = AllocateStart + GeneratedOffsets.AddressArgumentsData;
                                AddressFreeUse = AllocateStart + GeneratedOffsets.AddressFreeUse;

                                success = true;
                            }
                            while (false);
                        }
                        catch { }
                        TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            "\t\t\t\t" + "Success: " + success.ToString()); return success;
                    }
                    #endregion
                    #region WRITE_ARGS
                    private bool WriteArgs()
                    {
                        int timeLimit = SubToolGeneralLimit;
                        bool success = false;
                        try
                        {
                            while (SubToolGeneralLimit > 0)
                            {
                                do
                                {
                                    TProcess.RefreshProcess(Instance);

                                    ulong moduleBase = TProcess.GetModuleBase(Instance, "kernel32.dll");
                                    if (moduleBase == 0) break;

                                    ulong _Sleep = TProcess.GetProcAddress(Instance, moduleBase, "Sleep");
                                    ulong _GetModuleHandleA = TProcess.GetProcAddress(Instance, moduleBase, "GetModuleHandleA");
                                    ulong _GetProcAddress = TProcess.GetProcAddress(Instance, moduleBase, "GetProcAddress");

                                    if (_Sleep == 0 || _GetModuleHandleA == 0 || _GetProcAddress == 0)
                                        break;

                                    RefWriteBytes(Instance, AllocateStart + GeneratedOffsets.FUNCTIONPTR_Sleep, BitConverter.GetBytes(_Sleep));
                                    RefWriteBytes(Instance, AllocateStart + GeneratedOffsets.FUNCTIONPTR_GetModuleHandleA, BitConverter.GetBytes(_GetModuleHandleA));
                                    RefWriteBytes(Instance, AllocateStart + GeneratedOffsets.FUNCTIONPTR_GetProcAddress, BitConverter.GetBytes(_GetProcAddress));

                                    success = true;

                                    TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                                        "\t\t\t\t" + "Success: " + success.ToString()); return success;
                                }
                                while (false);
                                Thread.Sleep(1000);
                                SubToolGeneralLimit -= 1000;
                            }
                        }
                        catch { }
                        TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            "\t\t\t\t" + "Success: " + success.ToString()); return success;
                    }
                    #endregion
                    #region EXECUTE
                    private bool Execute()
                    {
                        bool success = false;
                        try
                        {
                            do
                            {
                                RefCreateThread(Instance, AllocateStart + GeneratedOffsets.HK_GetInstances);
                                success = true;
                            }
                            while (false);
                        }
                        catch { }
                        TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            "\t\t\t\t" + "Success: " + success.ToString()); return success;
                    }
                    #endregion
				}
			}
		}
	}
}