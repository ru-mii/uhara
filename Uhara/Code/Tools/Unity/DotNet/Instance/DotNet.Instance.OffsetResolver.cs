using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Threading;
using System.Windows.Forms;

public partial class Tools : MainShared
{
	public partial class Unity
	{
		public partial class DotNet
		{
			public partial class Instance
			{
				internal class OffsetResolver
				{
                    #region VARIABLES
                    bool Loaded = false;
                    static int SubToolGeneralLimit = 15000;

                    ulong AllocateSize = 0x20000;
                    ulong AllocateStart = 0;
                    ulong AddressArguments = 0;
                    ulong AddressArgumentsData = 0;
                    ulong AddressGlobalOutput = 0;
                    ulong AddressFreeUse = 0;

                    private struct GeneratedOffsets
                    {
                        public const ulong AddressArguments = 0x4000;
                        public const ulong AddressArgumentsData = 0x8000;
                        public const ulong AddressGlobalOutput = 0x12000;
                        public const ulong AddressFreeUse = 0x984;

                        public const ulong HK_HookPoint = 0x4C2;

                        public const ulong FUNCTIONPTR_Sleep = 0x3B3;
                        public const ulong FUNCTIONPTR_GetModuleHandleA = 0x3BB;
                        public const ulong FUNCTIONPTR_GetProcAddress = 0x3C3;
                    }

                    public class PathInfo
                    {
                        public ulong DirectAddress;
                        public int[] Offsets;

                        public PathInfo(ulong directAddress, int[] offsets)
                        {
                            DirectAddress = directAddress;
                            Offsets = offsets;
                        }
                    }

                    public class Element
                    {
                        public short Offset = 0;
                        public short Size = 0;

                        public Element(short offset, short size)
                        {
                            Offset = offset;
                            Size = size;
                        }
                    }

                    public static class OutStruct
                    {
                        public static Element DirectAddress = new Element(offset: 0, size: 8);
                        public static Element Offset = new Element(offset: 8, size: 4);
                    }
                    #endregion
                    #region ASM_CODE
                    byte[] AsmCode = new byte[] {
    0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x2D, 0x90, 0x32, 0x90, 0x2E, 0x90, 0x30, 0x90, 0x2D, 0x90, 0x62, 0x90, 0x64, 0x90, 0x77, 0x90, 0x67, 0x90, 0x63, 0x90, 0x2E, 0x90, 0x64, 0x90, 0x6C, 0x90, 0x6C, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x67, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x72, 0x90, 0x6F, 0x90, 0x6F, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x64, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x68, 0x90, 0x72, 0x90, 0x65, 0x90, 0x61, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x74, 0x90, 0x74, 0x90, 0x61, 0x90, 0x63, 0x90, 0x68, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x64, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x5F, 0x90, 0x6F, 0x90, 0x70, 0x90, 0x65, 0x90, 0x6E, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x72, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x74, 0x90, 0x68, 0x90, 0x6F, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x72, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x73, 0x90, 0x74, 0x90, 0x72, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x67, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x65, 0x90, 0x77, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x72, 0x90, 0x75, 0x90, 0x6E, 0x90, 0x74, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x76, 0x90, 0x6F, 0x90, 0x6B, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x6F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x65, 0x90, 0x77, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x6F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x73, 0x90, 0x70, 0x90, 0x61, 0x90, 0x63, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x67, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x69, 0x90, 0x6D, 0x90, 0x61, 0x90, 0x67, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x6F, 0x90, 0x72, 0x90, 0x65, 0x90, 0x61, 0x90, 0x63, 0x90, 0x68, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x79, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x69, 0x90, 0x65, 0x90, 0x6C, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x72, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x5F, 0x90, 0x6E, 0x90, 0x61, 0x90, 0x6D, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x69, 0x90, 0x65, 0x90, 0x6C, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x6F, 0x90, 0x66, 0x90, 0x66, 0x90, 0x73, 0x90, 0x65, 0x90, 0x74, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x69, 0x90, 0x65, 0x90, 0x6C, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x72, 0x90, 0x6F, 0x90, 0x6D, 0x90, 0x5F, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x74, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x67, 0x90, 0x73, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x63, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x73, 0x90, 0x73, 0x90, 0x5F, 0x90, 0x76, 0x90, 0x74, 0x90, 0x61, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x65, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x76, 0x90, 0x74, 0x90, 0x61, 0x90, 0x62, 0x90, 0x6C, 0x90, 0x65, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x73, 0x90, 0x74, 0x90, 0x61, 0x90, 0x74, 0x90, 0x69, 0x90, 0x63, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x69, 0x90, 0x65, 0x90, 0x6C, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x64, 0x90, 0x61, 0x90, 0x74, 0x90, 0x61, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x6F, 0x90, 0x6E, 0x90, 0x6F, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x69, 0x90, 0x65, 0x90, 0x6C, 0x90, 0x64, 0x90, 0x5F, 0x90, 0x67, 0x90, 0x65, 0x90, 0x74, 0x90, 0x5F, 0x90, 0x66, 0x90, 0x6C, 0x90, 0x61, 0x90, 0x67, 0x90, 0x73, 0x90, 0x00, 0x90, 0x55, 0x90, 0x6E, 0x90, 0x69, 0x90, 0x74, 0x90, 0x79, 0x90, 0x45, 0x90, 0x6E, 0x90, 0x67, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x65, 0x90, 0x2E, 0x90, 0x43, 0x90, 0x6F, 0x90, 0x72, 0x90, 0x65, 0x90, 0x4D, 0x90, 0x6F, 0x90, 0x64, 0x90, 0x75, 0x90, 0x6C, 0x90, 0x65, 0x90, 0x00, 0x90, 0x55, 0x90, 0x6E, 0x90, 0x69, 0x90, 0x74, 0x90, 0x79, 0x90, 0x45, 0x90, 0x6E, 0x90, 0x67, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x65, 0x90, 0x00, 0x90, 0x4F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x00, 0x90, 0x46, 0x90, 0x69, 0x90, 0x6E, 0x90, 0x64, 0x90, 0x4F, 0x90, 0x62, 0x90, 0x6A, 0x90, 0x65, 0x90, 0x63, 0x90, 0x74, 0x90, 0x73, 0x90, 0x4F, 0x90, 0x66, 0x90, 0x54, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x41, 0x90, 0x6C, 0x90, 0x6C, 0x90, 0x00, 0x90, 0x52, 0x90, 0x65, 0x90, 0x73, 0x90, 0x6F, 0x90, 0x75, 0x90, 0x72, 0x90, 0x63, 0x90, 0x65, 0x90, 0x73, 0x90, 0x00, 0x90, 0x6D, 0x90, 0x73, 0x90, 0x63, 0x90, 0x6F, 0x90, 0x72, 0x90, 0x6C, 0x90, 0x69, 0x90, 0x62, 0x90, 0x00, 0x90, 0x53, 0x90, 0x79, 0x90, 0x73, 0x90, 0x74, 0x90, 0x65, 0x90, 0x6D, 0x90, 0x00, 0x90, 0x54, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x00, 0x90, 0x47, 0x90, 0x65, 0x90, 0x74, 0x90, 0x54, 0x90, 0x79, 0x90, 0x70, 0x90, 0x65, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x4D, 0x90, 0x31, 0x90, 0xD2, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC9, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCA, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC1, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x01, 0x90, 0x4C, 0x90, 0x0F, 0x90, 0xB6, 0x90, 0x0A, 0x90, 0x4D, 0x90, 0x39, 0x90, 0xC8, 0x90, 0x75, 0x90, 0x29, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x75, 0x90, 0x03, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xC9, 0x90, 0x75, 0x90, 0x03, 0x90, 0x49, 0x90, 0xFF, 0x90, 0xC2, 0x90, 0x4D, 0x90, 0x85, 0x90, 0xD2, 0x90, 0x74, 0x90, 0xD8, 0x90, 0x49, 0x90, 0x83, 0x90, 0xFA, 0x90, 0x01, 0x90, 0x75, 0x90, 0x02, 0x90, 0xEB, 0x90, 0x0C, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC0, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x31, 0x90, 0xC0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x8D, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0xC3, 0x90, 0x56, 0x90, 0x57, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x18, 0x90, 0x48, 0x90, 0x89, 0x90, 0xCE, 0x90, 0x48, 0x90, 0x89, 0x90, 0xD7, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x45, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x35, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x3C, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x24, 0x90, 0x48, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x09, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC2, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x5F, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x0D, 0x90, 0x48, 0x90, 0x89, 0x90, 0xF1, 0x90, 0x48, 0x90, 0x89, 0x90, 0xFA, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC2, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0x0A, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x18, 0x90, 0x5F, 0x90, 0x5E, 0x90, 0xC3, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x10, 0x90, 0x49, 0x90, 0x89, 0x90, 0xE0, 0x90, 0x49, 0x90, 0xC7, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x89, 0x90, 0xE2, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC8, 0x90, 0x48, 0x90, 0x89, 0x90, 0x02, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x88, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x30, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xCD, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x30, 0x90, 0x5A, 0x90, 0x41, 0x90, 0x58, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xC0, 0x90, 0xC3, 0x90, 0x50, 0x90, 0x53, 0x90, 0x51, 0x90, 0x52, 0x90, 0x56, 0x90, 0x57, 0x90, 0x55, 0x90, 0x54, 0x90, 0x41, 0x90, 0x50, 0x90, 0x41, 0x90, 0x51, 0x90, 0x41, 0x90, 0x52, 0x90, 0x41, 0x90, 0x53, 0x90, 0x41, 0x90, 0x54, 0x90, 0x41, 0x90, 0x55, 0x90, 0x41, 0x90, 0x56, 0x90, 0x41, 0x90, 0x57, 0x90, 0x9C, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x08, 0x90, 0x48, 0x90, 0x83, 0x90, 0xEC, 0x90, 0x28, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC3, 0x90, 0x1E, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x6B, 0x90, 0xDB, 0x90, 0x0A, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x2D, 0x90, 0x0B, 0x90, 0x3B, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x3D, 0x90, 0x04, 0x90, 0x1B, 0x90, 0x01, 0x90, 0x00, 0x90, 0xC7, 0x90, 0x47, 0x90, 0x08, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xEB, 0x90, 0x1C, 0x90, 0x48, 0x90, 0x85, 0x90, 0xDB, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x54, 0x90, 0x04, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCB, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC1, 0x90, 0x64, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xFD, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xB0, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x8D, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0xCF, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x84, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xB9, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0xB4, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xB0, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x62, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xAC, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x92, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x96, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x40, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x5D, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x6C, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x60, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x1A, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x91, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x46, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x5A, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xF4, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xB0, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x20, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x4C, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xCE, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x43, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xFA, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x6E, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xA8, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x33, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xD4, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x50, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x82, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x24, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xAE, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x32, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x5C, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x1A, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x88, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x14, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x36, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x13, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x62, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xF6, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x10, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0x03, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x3C, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xD8, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xEA, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xF1, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x16, 0x90, 0xFE, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0xBA, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xC4, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xE5, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xF0, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x9C, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x9E, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xD4, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xCA, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x7E, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x78, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xC0, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xA4, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x60, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x52, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x15, 0x90, 0xBC, 0x90, 0xFB, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x7E, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x0D, 0x90, 0x42, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x89, 0x90, 0x01, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x71, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x62, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x61, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x4A, 0x90, 0xFD, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xEB, 0x90, 0x1C, 0x90, 0x48, 0x90, 0x85, 0x90, 0xDB, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x9C, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0xFF, 0x90, 0xCB, 0x90, 0x48, 0x90, 0xC7, 0x90, 0xC1, 0x90, 0xE8, 0x90, 0x03, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0x45, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x4D, 0x90, 0x00, 0x90, 0x48, 0x90, 0x8D, 0x90, 0x05, 0x90, 0xA3, 0x90, 0xFC, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0xD2, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x0C, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0xC1, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x48, 0x90, 0x8B, 0x90, 0x55, 0x90, 0x08, 0x90, 0x4C, 0x90, 0x8B, 0x90, 0x45, 0x90, 0x10, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x10, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x46, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0x4C, 0x90, 0x8D, 0x90, 0x75, 0x90, 0x18, 0x90, 0x4C, 0x90, 0x8D, 0x90, 0x6F, 0x90, 0x08, 0x90, 0x49, 0x90, 0x83, 0x90, 0x3E, 0x90, 0x00, 0x90, 0x75, 0x90, 0x6B, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x82, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0xA9, 0x90, 0x80, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x1D, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0xA9, 0x90, 0x00, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0x0F, 0x90, 0x84, 0x90, 0x11, 0x90, 0x01, 0x90, 0x00, 0x90, 0x00, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xB1, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xFF, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x51, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xE7, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x44, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xD2, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x48, 0x90, 0x89, 0x90, 0x07, 0x90, 0xE9, 0x90, 0xCA, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xF9, 0x90, 0x49, 0x90, 0x8B, 0x90, 0x16, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xF4, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x0F, 0x90, 0x84, 0x90, 0xB2, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC4, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x14, 0x90, 0xF8, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0xA9, 0x90, 0x10, 0x90, 0x00, 0x90, 0x00, 0x90, 0x00, 0x90, 0x75, 0x90, 0x0E, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xD0, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0xEB, 0x90, 0x49, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x2D, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x7F, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xFA, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xD1, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x6B, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0xC8, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x5A, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x8C, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x4C, 0x90, 0x89, 0x90, 0x3F, 0x90, 0x4C, 0x90, 0x8D, 0x90, 0x6F, 0x90, 0x08, 0x90, 0x41, 0x90, 0x89, 0x90, 0x45, 0x90, 0x00, 0x90, 0x41, 0x90, 0xC7, 0x90, 0x45, 0x90, 0x04, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC5, 0x90, 0x04, 0x90, 0x49, 0x90, 0x83, 0x90, 0xC6, 0x90, 0x08, 0x90, 0x49, 0x90, 0x83, 0x90, 0x3E, 0x90, 0x00, 0x90, 0x74, 0x90, 0x2A, 0x90, 0x4C, 0x90, 0x89, 0x90, 0xE1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x67, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x19, 0x90, 0x48, 0x90, 0x89, 0x90, 0xC1, 0x90, 0xFF, 0x90, 0x35, 0x90, 0x5E, 0x90, 0xF7, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x58, 0x90, 0xFF, 0x90, 0xD0, 0x90, 0x48, 0x90, 0x85, 0x90, 0xC0, 0x90, 0x74, 0x90, 0x08, 0x90, 0x49, 0x90, 0x89, 0x90, 0xC7, 0x90, 0xE9, 0x90, 0x36, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0xFF, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x28, 0x90, 0x48, 0x90, 0x83, 0x90, 0xC4, 0x90, 0x08, 0x90, 0x9D, 0x90, 0x41, 0x90, 0x5F, 0x90, 0x41, 0x90, 0x5E, 0x90, 0x41, 0x90, 0x5D, 0x90, 0x41, 0x90, 0x5C, 0x90, 0x41, 0x90, 0x5B, 0x90, 0x41, 0x90, 0x5A, 0x90, 0x41, 0x90, 0x59, 0x90, 0x41, 0x90, 0x58, 0x90, 0x5C, 0x90, 0x5D, 0x90, 0x5F, 0x90, 0x5E, 0x90, 0x5A, 0x90, 0x59, 0x90, 0x5B, 0x90, 0x58, 0x90, 0xC3
};
                    #endregion

                    #region INTERNAL_API
                    internal PathInfo GetPath(string imageName, string namespaceName, string className, params string[] fieldsNames)
                    {
                        // clear memory
                        {
                            AddressArguments = AllocateStart + GeneratedOffsets.AddressArguments;
                            AddressArgumentsData = AllocateStart + GeneratedOffsets.AddressArgumentsData;
                            AddressGlobalOutput = AllocateStart + GeneratedOffsets.AddressGlobalOutput;

                            int cleanSize = (int)((AllocateStart + AllocateSize) - AddressArguments);
                            RefWriteBytes(ProcessInstance, AddressArguments, new byte[cleanSize]);
                        }

                        // standard names
                        {
                            // image
                            RefWriteBytes(ProcessInstance, AddressArguments, BitConverter.GetBytes(AddressArgumentsData));
                            AddressArguments += 0x8;
                            byte[] imageNameBytes = TUtils.StringToMultibyte(imageName);
                            RefWriteBytes(ProcessInstance, AddressArgumentsData, imageNameBytes);
                            AddressArgumentsData += (ulong)imageNameBytes.Length;

                            // namespace
                            RefWriteBytes(ProcessInstance, AddressArguments, BitConverter.GetBytes(AddressArgumentsData));
                            AddressArguments += 0x8;
                            byte[] namespaceNameBytes = TUtils.StringToMultibyte(namespaceName);
                            RefWriteBytes(ProcessInstance, AddressArgumentsData, namespaceNameBytes);
                            AddressArgumentsData += (ulong)namespaceNameBytes.Length;

                            // class
                            RefWriteBytes(ProcessInstance, AddressArguments, BitConverter.GetBytes(AddressArgumentsData));
                            AddressArguments += 0x8;
                            byte[] classNameBytes = TUtils.StringToMultibyte(className);
                            RefWriteBytes(ProcessInstance, AddressArgumentsData, classNameBytes);
                            AddressArgumentsData += (ulong)classNameBytes.Length;
                        }

                        // offset field names
                        {
                            foreach (string fieldName in fieldsNames)
                            {
                                RefWriteBytes(ProcessInstance, AddressArguments, BitConverter.GetBytes(AddressArgumentsData));
                                AddressArguments += 0x8;
                                byte[] nameBytes = TUtils.StringToMultibyte(fieldName);
                                RefWriteBytes(ProcessInstance, AddressArgumentsData, nameBytes);
                                AddressArgumentsData += (ulong)nameBytes.Length;
                            }
                        }

                        // ---
                        {
                            TProcess.WaitForThread(TProcess.CreateRemoteThread(ProcessInstance, AllocateStart + GeneratedOffsets.HK_HookPoint), 10000);

                            ulong directAddress = TMemory.ReadMemory<ulong>(ProcessInstance, (AddressGlobalOutput + (ulong)OutStruct.DirectAddress.Offset));
                            List<int> offsets = new List<int>();

                            for (int i = 0; i < fieldsNames.Length; i++)
                            {
                                int offset = TMemory.ReadMemory<int>(ProcessInstance,
                                    (AddressGlobalOutput + (ulong)OutStruct.DirectAddress.Size) +
                                    (ulong)(i * OutStruct.Offset.Size));

                                if (offset == -1) break;

                                offsets.Add(offset);
                            }

                            return new PathInfo(directAddress, offsets.ToArray());
                        }
                    }
                    #endregion

                    public OffsetResolver()
					{
                        do
                        {
                            if (Allocate() != Result.Success) break;
                            if (WriteArgs() != Result.Success) break;

                            Loaded = true;
                            TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                                " | " + "[FINISHED]");
                        }
                        while (false);
                    }

                    #region ALLOCATE
                    private Result Allocate()
                    {
                        Result result = Result.None;
                        do
                        {
                            AllocateStart = MemoryManager.AllocateSafe((int)AllocateSize, ToolUniqueID);
                            if (AllocateStart == 0) break;

                            byte[] decoded = TArray.DecodeBlock(AsmCode);
                            RefWriteBytes(ProcessInstance, AllocateStart, decoded);

                            AddressArguments = AllocateStart + GeneratedOffsets.AddressArguments;
                            AddressArgumentsData = AllocateStart + GeneratedOffsets.AddressArgumentsData;
                            AddressGlobalOutput = AllocateStart + GeneratedOffsets.AddressGlobalOutput;
                            AddressFreeUse = AllocateStart + GeneratedOffsets.AddressFreeUse;

                            result = Result.Success;
                        }
                        while (false);
                        TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            " | " + "Success: " + result.ToString()); return result;
                    }
                    #endregion
                    #region WRITE_ARGS
                    private Result WriteArgs()
                    {
                        Result result = Result.None;
                        int timeLimit = SubToolGeneralLimit;
                        while (SubToolGeneralLimit > 0)
                        {
                            do
                            {
                                ProcessInstance = TProcess.RefreshProcess(ProcessInstance);

                                ulong moduleBase = TProcess.GetModuleBase(ProcessInstance, "kernel32.dll");
                                if (moduleBase == 0) break;

                                ulong _Sleep = TProcess.GetProcAddress(ProcessInstance, moduleBase, "Sleep");
                                ulong _GetModuleHandleA = TProcess.GetProcAddress(ProcessInstance, moduleBase, "GetModuleHandleA");
                                ulong _GetProcAddress = TProcess.GetProcAddress(ProcessInstance, moduleBase, "GetProcAddress");

                                if (_Sleep == 0 || _GetModuleHandleA == 0 || _GetProcAddress == 0)
                                    break;

                                RefWriteBytes(ProcessInstance, AllocateStart + GeneratedOffsets.FUNCTIONPTR_Sleep, BitConverter.GetBytes(_Sleep));
                                RefWriteBytes(ProcessInstance, AllocateStart + GeneratedOffsets.FUNCTIONPTR_GetModuleHandleA, BitConverter.GetBytes(_GetModuleHandleA));
                                RefWriteBytes(ProcessInstance, AllocateStart + GeneratedOffsets.FUNCTIONPTR_GetProcAddress, BitConverter.GetBytes(_GetProcAddress));

                                result = Result.Success;
                            }
                            while (false);
                            if (result != Result.None) break;
                            Thread.Sleep(1000);
                            SubToolGeneralLimit -= 1000;
                        }
                        TUtils.Print(DebugClass + "." + GetType().Name + "." + MethodBase.GetCurrentMethod().Name +
                            " | " + "Success: " + result.ToString()); return result;
                    }
                    #endregion
                }
            }
		}
	}
}